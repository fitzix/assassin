// Code generated by entc, DO NOT EDIT.

package tag

import (
	"github.com/fitzix/assassin/ent/schema"
)

const (
	// Label holds the string label denoting the tag type in the database.
	Label = "tag"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name vertex property in the database.
	FieldName = "name"

	// Table holds the table name of the tag in the database.
	Table = "tags"
	// AppTable is the table the holds the app relation/edge. The primary key declared below.
	AppTable = "app_tags"
	// AppInverseTable is the table name for the App entity.
	// It exists in this package in order to avoid circular dependency with the "app" package.
	AppInverseTable = "apps"
)

// Columns holds all SQL columns for tag fields.
var Columns = []string{
	FieldID,
	FieldName,
}

var (
	// AppPrimaryKey and AppColumn2 are the table columns denoting the
	// primary key for the app relation (M2M).
	AppPrimaryKey = []string{"app_id", "tag_id"}
)

var (
	fields = schema.Tag{}.Fields()

	// descName is the schema descriptor for name field.
	descName = fields[0].Descriptor()
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator = func() func(string) error {
		validators := descName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
)
