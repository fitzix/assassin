// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/fitzix/assassin/ent/app"
	"github.com/fitzix/assassin/ent/carousel"
	"github.com/fitzix/assassin/ent/category"
	"github.com/fitzix/assassin/ent/hot"
	"github.com/fitzix/assassin/ent/predicate"
	"github.com/fitzix/assassin/ent/tag"
	"github.com/fitzix/assassin/ent/version"
)

// AppQuery is the builder for querying App entities.
type AppQuery struct {
	config
	limit      *int
	offset     *int
	order      []Order
	unique     []string
	predicates []predicate.App
	// eager-loading edges.
	withTags       *TagQuery
	withCategories *CategoryQuery
	withCarousels  *CarouselQuery
	withVersions   *VersionQuery
	withHot        *HotQuery
	// intermediate query.
	sql *sql.Selector
}

// Where adds a new predicate for the builder.
func (aq *AppQuery) Where(ps ...predicate.App) *AppQuery {
	aq.predicates = append(aq.predicates, ps...)
	return aq
}

// Limit adds a limit step to the query.
func (aq *AppQuery) Limit(limit int) *AppQuery {
	aq.limit = &limit
	return aq
}

// Offset adds an offset step to the query.
func (aq *AppQuery) Offset(offset int) *AppQuery {
	aq.offset = &offset
	return aq
}

// Order adds an order step to the query.
func (aq *AppQuery) Order(o ...Order) *AppQuery {
	aq.order = append(aq.order, o...)
	return aq
}

// QueryTags chains the current query on the tags edge.
func (aq *AppQuery) QueryTags() *TagQuery {
	query := &TagQuery{config: aq.config}
	step := sqlgraph.NewStep(
		sqlgraph.From(app.Table, app.FieldID, aq.sqlQuery()),
		sqlgraph.To(tag.Table, tag.FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, app.TagsTable, app.TagsPrimaryKey...),
	)
	query.sql = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
	return query
}

// QueryCategories chains the current query on the categories edge.
func (aq *AppQuery) QueryCategories() *CategoryQuery {
	query := &CategoryQuery{config: aq.config}
	step := sqlgraph.NewStep(
		sqlgraph.From(app.Table, app.FieldID, aq.sqlQuery()),
		sqlgraph.To(category.Table, category.FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, app.CategoriesTable, app.CategoriesPrimaryKey...),
	)
	query.sql = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
	return query
}

// QueryCarousels chains the current query on the carousels edge.
func (aq *AppQuery) QueryCarousels() *CarouselQuery {
	query := &CarouselQuery{config: aq.config}
	step := sqlgraph.NewStep(
		sqlgraph.From(app.Table, app.FieldID, aq.sqlQuery()),
		sqlgraph.To(carousel.Table, carousel.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, app.CarouselsTable, app.CarouselsColumn),
	)
	query.sql = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
	return query
}

// QueryVersions chains the current query on the versions edge.
func (aq *AppQuery) QueryVersions() *VersionQuery {
	query := &VersionQuery{config: aq.config}
	step := sqlgraph.NewStep(
		sqlgraph.From(app.Table, app.FieldID, aq.sqlQuery()),
		sqlgraph.To(version.Table, version.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, app.VersionsTable, app.VersionsColumn),
	)
	query.sql = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
	return query
}

// QueryHot chains the current query on the hot edge.
func (aq *AppQuery) QueryHot() *HotQuery {
	query := &HotQuery{config: aq.config}
	step := sqlgraph.NewStep(
		sqlgraph.From(app.Table, app.FieldID, aq.sqlQuery()),
		sqlgraph.To(hot.Table, hot.FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, app.HotTable, app.HotColumn),
	)
	query.sql = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
	return query
}

// First returns the first App entity in the query. Returns *NotFoundError when no app was found.
func (aq *AppQuery) First(ctx context.Context) (*App, error) {
	as, err := aq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(as) == 0 {
		return nil, &NotFoundError{app.Label}
	}
	return as[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (aq *AppQuery) FirstX(ctx context.Context) *App {
	a, err := aq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return a
}

// FirstID returns the first App id in the query. Returns *NotFoundError when no id was found.
func (aq *AppQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = aq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{app.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (aq *AppQuery) FirstXID(ctx context.Context) int {
	id, err := aq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only App entity in the query, returns an error if not exactly one entity was returned.
func (aq *AppQuery) Only(ctx context.Context) (*App, error) {
	as, err := aq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(as) {
	case 1:
		return as[0], nil
	case 0:
		return nil, &NotFoundError{app.Label}
	default:
		return nil, &NotSingularError{app.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (aq *AppQuery) OnlyX(ctx context.Context) *App {
	a, err := aq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return a
}

// OnlyID returns the only App id in the query, returns an error if not exactly one id was returned.
func (aq *AppQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = aq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{app.Label}
	default:
		err = &NotSingularError{app.Label}
	}
	return
}

// OnlyXID is like OnlyID, but panics if an error occurs.
func (aq *AppQuery) OnlyXID(ctx context.Context) int {
	id, err := aq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Apps.
func (aq *AppQuery) All(ctx context.Context) ([]*App, error) {
	return aq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (aq *AppQuery) AllX(ctx context.Context) []*App {
	as, err := aq.All(ctx)
	if err != nil {
		panic(err)
	}
	return as
}

// IDs executes the query and returns a list of App ids.
func (aq *AppQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := aq.Select(app.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (aq *AppQuery) IDsX(ctx context.Context) []int {
	ids, err := aq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (aq *AppQuery) Count(ctx context.Context) (int, error) {
	return aq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (aq *AppQuery) CountX(ctx context.Context) int {
	count, err := aq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (aq *AppQuery) Exist(ctx context.Context) (bool, error) {
	return aq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (aq *AppQuery) ExistX(ctx context.Context) bool {
	exist, err := aq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (aq *AppQuery) Clone() *AppQuery {
	return &AppQuery{
		config:     aq.config,
		limit:      aq.limit,
		offset:     aq.offset,
		order:      append([]Order{}, aq.order...),
		unique:     append([]string{}, aq.unique...),
		predicates: append([]predicate.App{}, aq.predicates...),
		// clone intermediate query.
		sql: aq.sql.Clone(),
	}
}

//  WithTags tells the query-builder to eager-loads the nodes that are connected to
// the "tags" edge. The optional arguments used to configure the query builder of the edge.
func (aq *AppQuery) WithTags(opts ...func(*TagQuery)) *AppQuery {
	query := &TagQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withTags = query
	return aq
}

//  WithCategories tells the query-builder to eager-loads the nodes that are connected to
// the "categories" edge. The optional arguments used to configure the query builder of the edge.
func (aq *AppQuery) WithCategories(opts ...func(*CategoryQuery)) *AppQuery {
	query := &CategoryQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withCategories = query
	return aq
}

//  WithCarousels tells the query-builder to eager-loads the nodes that are connected to
// the "carousels" edge. The optional arguments used to configure the query builder of the edge.
func (aq *AppQuery) WithCarousels(opts ...func(*CarouselQuery)) *AppQuery {
	query := &CarouselQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withCarousels = query
	return aq
}

//  WithVersions tells the query-builder to eager-loads the nodes that are connected to
// the "versions" edge. The optional arguments used to configure the query builder of the edge.
func (aq *AppQuery) WithVersions(opts ...func(*VersionQuery)) *AppQuery {
	query := &VersionQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withVersions = query
	return aq
}

//  WithHot tells the query-builder to eager-loads the nodes that are connected to
// the "hot" edge. The optional arguments used to configure the query builder of the edge.
func (aq *AppQuery) WithHot(opts ...func(*HotQuery)) *AppQuery {
	query := &HotQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withHot = query
	return aq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.App.Query().
//		GroupBy(app.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (aq *AppQuery) GroupBy(field string, fields ...string) *AppGroupBy {
	group := &AppGroupBy{config: aq.config}
	group.fields = append([]string{field}, fields...)
	group.sql = aq.sqlQuery()
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.App.Query().
//		Select(app.FieldCreatedAt).
//		Scan(ctx, &v)
//
func (aq *AppQuery) Select(field string, fields ...string) *AppSelect {
	selector := &AppSelect{config: aq.config}
	selector.fields = append([]string{field}, fields...)
	selector.sql = aq.sqlQuery()
	return selector
}

func (aq *AppQuery) sqlAll(ctx context.Context) ([]*App, error) {
	var (
		nodes       = []*App{}
		_spec       = aq.querySpec()
		loadedTypes = [5]bool{
			aq.withTags != nil,
			aq.withCategories != nil,
			aq.withCarousels != nil,
			aq.withVersions != nil,
			aq.withHot != nil,
		}
	)
	_spec.ScanValues = func() []interface{} {
		node := &App{config: aq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, aq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := aq.withTags; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*App, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
		}
		var (
			edgeids []int
			edges   = make(map[int][]*App)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: false,
				Table:   app.TagsTable,
				Columns: app.TagsPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(app.TagsPrimaryKey[0], fks...))
			},

			ScanValues: func() [2]interface{} {
				return [2]interface{}{&sql.NullInt64{}, &sql.NullInt64{}}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				edgeids = append(edgeids, inValue)
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, aq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "tags": %v`, err)
		}
		query.Where(tag.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "tags" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Tags = append(nodes[i].Edges.Tags, n)
			}
		}
	}

	if query := aq.withCategories; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*App, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
		}
		var (
			edgeids []int
			edges   = make(map[int][]*App)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: false,
				Table:   app.CategoriesTable,
				Columns: app.CategoriesPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(app.CategoriesPrimaryKey[0], fks...))
			},

			ScanValues: func() [2]interface{} {
				return [2]interface{}{&sql.NullInt64{}, &sql.NullInt64{}}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				edgeids = append(edgeids, inValue)
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, aq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "categories": %v`, err)
		}
		query.Where(category.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "categories" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Categories = append(nodes[i].Edges.Categories, n)
			}
		}
	}

	if query := aq.withCarousels; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*App)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.Carousel(func(s *sql.Selector) {
			s.Where(sql.InValues(app.CarouselsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.app_carousels
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "app_carousels" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "app_carousels" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Carousels = append(node.Edges.Carousels, n)
		}
	}

	if query := aq.withVersions; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*App)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.Version(func(s *sql.Selector) {
			s.Where(sql.InValues(app.VersionsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.app_versions
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "app_versions" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "app_versions" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Versions = append(node.Edges.Versions, n)
		}
	}

	if query := aq.withHot; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*App)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.Hot(func(s *sql.Selector) {
			s.Where(sql.InValues(app.HotColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.app_hot
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "app_hot" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "app_hot" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Hot = n
		}
	}

	return nodes, nil
}

func (aq *AppQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := aq.querySpec()
	return sqlgraph.CountNodes(ctx, aq.driver, _spec)
}

func (aq *AppQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := aq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (aq *AppQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   app.Table,
			Columns: app.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: app.FieldID,
			},
		},
		From:   aq.sql,
		Unique: true,
	}
	if ps := aq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := aq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := aq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := aq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (aq *AppQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(aq.driver.Dialect())
	t1 := builder.Table(app.Table)
	selector := builder.Select(t1.Columns(app.Columns...)...).From(t1)
	if aq.sql != nil {
		selector = aq.sql
		selector.Select(selector.Columns(app.Columns...)...)
	}
	for _, p := range aq.predicates {
		p(selector)
	}
	for _, p := range aq.order {
		p(selector)
	}
	if offset := aq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := aq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AppGroupBy is the builder for group-by App entities.
type AppGroupBy struct {
	config
	fields []string
	fns    []Aggregate
	// intermediate query.
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the group-by query.
func (agb *AppGroupBy) Aggregate(fns ...Aggregate) *AppGroupBy {
	agb.fns = append(agb.fns, fns...)
	return agb
}

// Scan applies the group-by query and scan the result into the given value.
func (agb *AppGroupBy) Scan(ctx context.Context, v interface{}) error {
	return agb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (agb *AppGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := agb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (agb *AppGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(agb.fields) > 1 {
		return nil, errors.New("ent: AppGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := agb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (agb *AppGroupBy) StringsX(ctx context.Context) []string {
	v, err := agb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (agb *AppGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(agb.fields) > 1 {
		return nil, errors.New("ent: AppGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := agb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (agb *AppGroupBy) IntsX(ctx context.Context) []int {
	v, err := agb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (agb *AppGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(agb.fields) > 1 {
		return nil, errors.New("ent: AppGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := agb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (agb *AppGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := agb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (agb *AppGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(agb.fields) > 1 {
		return nil, errors.New("ent: AppGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := agb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (agb *AppGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := agb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (agb *AppGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := agb.sqlQuery().Query()
	if err := agb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (agb *AppGroupBy) sqlQuery() *sql.Selector {
	selector := agb.sql
	columns := make([]string, 0, len(agb.fields)+len(agb.fns))
	columns = append(columns, agb.fields...)
	for _, fn := range agb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(agb.fields...)
}

// AppSelect is the builder for select fields of App entities.
type AppSelect struct {
	config
	fields []string
	// intermediate queries.
	sql *sql.Selector
}

// Scan applies the selector query and scan the result into the given value.
func (as *AppSelect) Scan(ctx context.Context, v interface{}) error {
	return as.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (as *AppSelect) ScanX(ctx context.Context, v interface{}) {
	if err := as.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (as *AppSelect) Strings(ctx context.Context) ([]string, error) {
	if len(as.fields) > 1 {
		return nil, errors.New("ent: AppSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := as.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (as *AppSelect) StringsX(ctx context.Context) []string {
	v, err := as.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (as *AppSelect) Ints(ctx context.Context) ([]int, error) {
	if len(as.fields) > 1 {
		return nil, errors.New("ent: AppSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := as.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (as *AppSelect) IntsX(ctx context.Context) []int {
	v, err := as.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (as *AppSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(as.fields) > 1 {
		return nil, errors.New("ent: AppSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := as.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (as *AppSelect) Float64sX(ctx context.Context) []float64 {
	v, err := as.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (as *AppSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(as.fields) > 1 {
		return nil, errors.New("ent: AppSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := as.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (as *AppSelect) BoolsX(ctx context.Context) []bool {
	v, err := as.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (as *AppSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := as.sqlQuery().Query()
	if err := as.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (as *AppSelect) sqlQuery() sql.Querier {
	selector := as.sql
	selector.Select(selector.Columns(as.fields...)...)
	return selector
}
