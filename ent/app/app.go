// Code generated by entc, DO NOT EDIT.

package app

import (
	"fmt"
	"time"

	"github.com/facebookincubator/ent"
	"github.com/fitzix/assassin/ent/schema"
)

const (
	// Label holds the string label denoting the app type in the database.
	Label = "app"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at vertex property in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at vertex property in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at vertex property in the database.
	FieldDeletedAt = "deleted_at"
	// FieldName holds the string denoting the name vertex property in the database.
	FieldName = "name"
	// FieldType holds the string denoting the type vertex property in the database.
	FieldType = "type"
	// FieldIcon holds the string denoting the icon vertex property in the database.
	FieldIcon = "icon"
	// FieldTitle holds the string denoting the title vertex property in the database.
	FieldTitle = "title"
	// FieldStatus holds the string denoting the status vertex property in the database.
	FieldStatus = "status"

	// Table holds the table name of the app in the database.
	Table = "apps"
	// TagsTable is the table the holds the tags relation/edge. The primary key declared below.
	TagsTable = "app_tags"
	// TagsInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	TagsInverseTable = "tags"
	// CategoriesTable is the table the holds the categories relation/edge. The primary key declared below.
	CategoriesTable = "app_categories"
	// CategoriesInverseTable is the table name for the Category entity.
	// It exists in this package in order to avoid circular dependency with the "category" package.
	CategoriesInverseTable = "categories"
	// CarouselsTable is the table the holds the carousels relation/edge.
	CarouselsTable = "carousels"
	// CarouselsInverseTable is the table name for the Carousel entity.
	// It exists in this package in order to avoid circular dependency with the "carousel" package.
	CarouselsInverseTable = "carousels"
	// CarouselsColumn is the table column denoting the carousels relation/edge.
	CarouselsColumn = "app_carousels"
	// VersionsTable is the table the holds the versions relation/edge.
	VersionsTable = "versions"
	// VersionsInverseTable is the table name for the Version entity.
	// It exists in this package in order to avoid circular dependency with the "version" package.
	VersionsInverseTable = "versions"
	// VersionsColumn is the table column denoting the versions relation/edge.
	VersionsColumn = "app_versions"
	// HotTable is the table the holds the hot relation/edge.
	HotTable = "hots"
	// HotInverseTable is the table name for the Hot entity.
	// It exists in this package in order to avoid circular dependency with the "hot" package.
	HotInverseTable = "hots"
	// HotColumn is the table column denoting the hot relation/edge.
	HotColumn = "app_hot"
)

// Columns holds all SQL columns for app fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldName,
	FieldType,
	FieldIcon,
	FieldTitle,
	FieldStatus,
}

var (
	// TagsPrimaryKey and TagsColumn2 are the table columns denoting the
	// primary key for the tags relation (M2M).
	TagsPrimaryKey = []string{"app_id", "tag_id"}
	// CategoriesPrimaryKey and CategoriesColumn2 are the table columns denoting the
	// primary key for the categories relation (M2M).
	CategoriesPrimaryKey = []string{"app_id", "category_id"}
)

var (
	mixin       = schema.App{}.Mixin()
	mixinFields = [...][]ent.Field{
		mixin[0].Fields(),
	}
	fields = schema.App{}.Fields()

	// descCreatedAt is the schema descriptor for created_at field.
	descCreatedAt = mixinFields[0][0].Descriptor()
	// DefaultCreatedAt holds the default value on creation for the created_at field.
	DefaultCreatedAt = descCreatedAt.Default.(func() time.Time)

	// descUpdatedAt is the schema descriptor for updated_at field.
	descUpdatedAt = mixinFields[0][1].Descriptor()
	// DefaultUpdatedAt holds the default value on creation for the updated_at field.
	DefaultUpdatedAt = descUpdatedAt.Default.(func() time.Time)
	// UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	UpdateDefaultUpdatedAt = descUpdatedAt.UpdateDefault.(func() time.Time)

	// descName is the schema descriptor for name field.
	descName = fields[0].Descriptor()
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator = func() func(string) error {
		validators := descName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()

	// descIcon is the schema descriptor for icon field.
	descIcon = fields[2].Descriptor()
	// IconValidator is a validator for the "icon" field. It is called by the builders before save.
	IconValidator = descIcon.Validators[0].(func(string) error)

	// descTitle is the schema descriptor for title field.
	descTitle = fields[3].Descriptor()
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator = descTitle.Validators[0].(func(string) error)
)

// Type defines the type for the type enum field.
type Type string

// TypeApp is the default Type.
const DefaultType = TypeApp

// Type values.
const (
	TypeApp  Type = "app"
	TypeBook Type = "book"
)

func (s Type) String() string {
	return string(s)
}

// TypeValidator is a validator for the "_type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeApp, TypeBook:
		return nil
	default:
		return fmt.Errorf("app: invalid enum value for type field: %q", _type)
	}
}

// Status defines the type for the status enum field.
type Status string

// StatusNormal is the default Status.
const DefaultStatus = StatusNormal

// Status values.
const (
	StatusNormal   Status = "normal"
	StatusAbnormal Status = "abnormal"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "s" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusNormal, StatusAbnormal:
		return nil
	default:
		return fmt.Errorf("app: invalid enum value for status field: %q", s)
	}
}
