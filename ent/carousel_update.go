// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/fitzix/assassin/ent/carousel"
	"github.com/fitzix/assassin/ent/predicate"
)

// CarouselUpdate is the builder for updating Carousel entities.
type CarouselUpdate struct {
	config
	url        *string
	predicates []predicate.Carousel
}

// Where adds a new predicate for the builder.
func (cu *CarouselUpdate) Where(ps ...predicate.Carousel) *CarouselUpdate {
	cu.predicates = append(cu.predicates, ps...)
	return cu
}

// SetURL sets the url field.
func (cu *CarouselUpdate) SetURL(s string) *CarouselUpdate {
	cu.url = &s
	return cu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (cu *CarouselUpdate) Save(ctx context.Context) (int, error) {
	if cu.url != nil {
		if err := carousel.URLValidator(*cu.url); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"url\": %v", err)
		}
	}
	return cu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CarouselUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CarouselUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CarouselUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *CarouselUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   carousel.Table,
			Columns: carousel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: carousel.FieldID,
			},
		},
	}
	if ps := cu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := cu.url; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: carousel.FieldURL,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CarouselUpdateOne is the builder for updating a single Carousel entity.
type CarouselUpdateOne struct {
	config
	id  int
	url *string
}

// SetURL sets the url field.
func (cuo *CarouselUpdateOne) SetURL(s string) *CarouselUpdateOne {
	cuo.url = &s
	return cuo
}

// Save executes the query and returns the updated entity.
func (cuo *CarouselUpdateOne) Save(ctx context.Context) (*Carousel, error) {
	if cuo.url != nil {
		if err := carousel.URLValidator(*cuo.url); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"url\": %v", err)
		}
	}
	return cuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CarouselUpdateOne) SaveX(ctx context.Context) *Carousel {
	c, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return c
}

// Exec executes the query on the entity.
func (cuo *CarouselUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CarouselUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *CarouselUpdateOne) sqlSave(ctx context.Context) (c *Carousel, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   carousel.Table,
			Columns: carousel.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  cuo.id,
				Type:   field.TypeInt,
				Column: carousel.FieldID,
			},
		},
	}
	if value := cuo.url; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: carousel.FieldURL,
		})
	}
	c = &Carousel{config: cuo.config}
	_spec.Assign = c.assignValues
	_spec.ScanValues = c.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return c, nil
}
