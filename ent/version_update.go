// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/fitzix/assassin/ent/app"
	"github.com/fitzix/assassin/ent/predicate"
	"github.com/fitzix/assassin/ent/source"
	"github.com/fitzix/assassin/ent/version"
)

// VersionUpdate is the builder for updating Version entities.
type VersionUpdate struct {
	config

	name           *string
	version        *string
	size           *string
	status         *version.Status
	app            map[int]struct{}
	sources        map[int]struct{}
	clearedApp     bool
	removedSources map[int]struct{}
	predicates     []predicate.Version
}

// Where adds a new predicate for the builder.
func (vu *VersionUpdate) Where(ps ...predicate.Version) *VersionUpdate {
	vu.predicates = append(vu.predicates, ps...)
	return vu
}

// SetName sets the name field.
func (vu *VersionUpdate) SetName(s string) *VersionUpdate {
	vu.name = &s
	return vu
}

// SetVersion sets the version field.
func (vu *VersionUpdate) SetVersion(s string) *VersionUpdate {
	vu.version = &s
	return vu
}

// SetSize sets the size field.
func (vu *VersionUpdate) SetSize(s string) *VersionUpdate {
	vu.size = &s
	return vu
}

// SetStatus sets the status field.
func (vu *VersionUpdate) SetStatus(v version.Status) *VersionUpdate {
	vu.status = &v
	return vu
}

// SetNillableStatus sets the status field if the given value is not nil.
func (vu *VersionUpdate) SetNillableStatus(v *version.Status) *VersionUpdate {
	if v != nil {
		vu.SetStatus(*v)
	}
	return vu
}

// SetAppID sets the app edge to App by id.
func (vu *VersionUpdate) SetAppID(id int) *VersionUpdate {
	if vu.app == nil {
		vu.app = make(map[int]struct{})
	}
	vu.app[id] = struct{}{}
	return vu
}

// SetNillableAppID sets the app edge to App by id if the given value is not nil.
func (vu *VersionUpdate) SetNillableAppID(id *int) *VersionUpdate {
	if id != nil {
		vu = vu.SetAppID(*id)
	}
	return vu
}

// SetApp sets the app edge to App.
func (vu *VersionUpdate) SetApp(a *App) *VersionUpdate {
	return vu.SetAppID(a.ID)
}

// AddSourceIDs adds the sources edge to Source by ids.
func (vu *VersionUpdate) AddSourceIDs(ids ...int) *VersionUpdate {
	if vu.sources == nil {
		vu.sources = make(map[int]struct{})
	}
	for i := range ids {
		vu.sources[ids[i]] = struct{}{}
	}
	return vu
}

// AddSources adds the sources edges to Source.
func (vu *VersionUpdate) AddSources(s ...*Source) *VersionUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return vu.AddSourceIDs(ids...)
}

// ClearApp clears the app edge to App.
func (vu *VersionUpdate) ClearApp() *VersionUpdate {
	vu.clearedApp = true
	return vu
}

// RemoveSourceIDs removes the sources edge to Source by ids.
func (vu *VersionUpdate) RemoveSourceIDs(ids ...int) *VersionUpdate {
	if vu.removedSources == nil {
		vu.removedSources = make(map[int]struct{})
	}
	for i := range ids {
		vu.removedSources[ids[i]] = struct{}{}
	}
	return vu
}

// RemoveSources removes sources edges to Source.
func (vu *VersionUpdate) RemoveSources(s ...*Source) *VersionUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return vu.RemoveSourceIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (vu *VersionUpdate) Save(ctx context.Context) (int, error) {
	if vu.status != nil {
		if err := version.StatusValidator(*vu.status); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"status\": %v", err)
		}
	}
	if len(vu.app) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"app\"")
	}
	return vu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VersionUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VersionUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VersionUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vu *VersionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   version.Table,
			Columns: version.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: version.FieldID,
			},
		},
	}
	if ps := vu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := vu.name; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: version.FieldName,
		})
	}
	if value := vu.version; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: version.FieldVersion,
		})
	}
	if value := vu.size; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: version.FieldSize,
		})
	}
	if value := vu.status; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  *value,
			Column: version.FieldStatus,
		})
	}
	if vu.clearedApp {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   version.AppTable,
			Columns: []string{version.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.app; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   version.AppTable,
			Columns: []string{version.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := vu.removedSources; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   version.SourcesTable,
			Columns: []string{version.SourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: source.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.sources; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   version.SourcesTable,
			Columns: []string{version.SourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: source.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// VersionUpdateOne is the builder for updating a single Version entity.
type VersionUpdateOne struct {
	config
	id int

	name           *string
	version        *string
	size           *string
	status         *version.Status
	app            map[int]struct{}
	sources        map[int]struct{}
	clearedApp     bool
	removedSources map[int]struct{}
}

// SetName sets the name field.
func (vuo *VersionUpdateOne) SetName(s string) *VersionUpdateOne {
	vuo.name = &s
	return vuo
}

// SetVersion sets the version field.
func (vuo *VersionUpdateOne) SetVersion(s string) *VersionUpdateOne {
	vuo.version = &s
	return vuo
}

// SetSize sets the size field.
func (vuo *VersionUpdateOne) SetSize(s string) *VersionUpdateOne {
	vuo.size = &s
	return vuo
}

// SetStatus sets the status field.
func (vuo *VersionUpdateOne) SetStatus(v version.Status) *VersionUpdateOne {
	vuo.status = &v
	return vuo
}

// SetNillableStatus sets the status field if the given value is not nil.
func (vuo *VersionUpdateOne) SetNillableStatus(v *version.Status) *VersionUpdateOne {
	if v != nil {
		vuo.SetStatus(*v)
	}
	return vuo
}

// SetAppID sets the app edge to App by id.
func (vuo *VersionUpdateOne) SetAppID(id int) *VersionUpdateOne {
	if vuo.app == nil {
		vuo.app = make(map[int]struct{})
	}
	vuo.app[id] = struct{}{}
	return vuo
}

// SetNillableAppID sets the app edge to App by id if the given value is not nil.
func (vuo *VersionUpdateOne) SetNillableAppID(id *int) *VersionUpdateOne {
	if id != nil {
		vuo = vuo.SetAppID(*id)
	}
	return vuo
}

// SetApp sets the app edge to App.
func (vuo *VersionUpdateOne) SetApp(a *App) *VersionUpdateOne {
	return vuo.SetAppID(a.ID)
}

// AddSourceIDs adds the sources edge to Source by ids.
func (vuo *VersionUpdateOne) AddSourceIDs(ids ...int) *VersionUpdateOne {
	if vuo.sources == nil {
		vuo.sources = make(map[int]struct{})
	}
	for i := range ids {
		vuo.sources[ids[i]] = struct{}{}
	}
	return vuo
}

// AddSources adds the sources edges to Source.
func (vuo *VersionUpdateOne) AddSources(s ...*Source) *VersionUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return vuo.AddSourceIDs(ids...)
}

// ClearApp clears the app edge to App.
func (vuo *VersionUpdateOne) ClearApp() *VersionUpdateOne {
	vuo.clearedApp = true
	return vuo
}

// RemoveSourceIDs removes the sources edge to Source by ids.
func (vuo *VersionUpdateOne) RemoveSourceIDs(ids ...int) *VersionUpdateOne {
	if vuo.removedSources == nil {
		vuo.removedSources = make(map[int]struct{})
	}
	for i := range ids {
		vuo.removedSources[ids[i]] = struct{}{}
	}
	return vuo
}

// RemoveSources removes sources edges to Source.
func (vuo *VersionUpdateOne) RemoveSources(s ...*Source) *VersionUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return vuo.RemoveSourceIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (vuo *VersionUpdateOne) Save(ctx context.Context) (*Version, error) {
	if vuo.status != nil {
		if err := version.StatusValidator(*vuo.status); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"status\": %v", err)
		}
	}
	if len(vuo.app) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"app\"")
	}
	return vuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VersionUpdateOne) SaveX(ctx context.Context) *Version {
	v, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query on the entity.
func (vuo *VersionUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VersionUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vuo *VersionUpdateOne) sqlSave(ctx context.Context) (v *Version, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   version.Table,
			Columns: version.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  vuo.id,
				Type:   field.TypeInt,
				Column: version.FieldID,
			},
		},
	}
	if value := vuo.name; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: version.FieldName,
		})
	}
	if value := vuo.version; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: version.FieldVersion,
		})
	}
	if value := vuo.size; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: version.FieldSize,
		})
	}
	if value := vuo.status; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  *value,
			Column: version.FieldStatus,
		})
	}
	if vuo.clearedApp {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   version.AppTable,
			Columns: []string{version.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.app; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   version.AppTable,
			Columns: []string{version.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := vuo.removedSources; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   version.SourcesTable,
			Columns: []string{version.SourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: source.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.sources; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   version.SourcesTable,
			Columns: []string{version.SourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: source.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	v = &Version{config: vuo.config}
	_spec.Assign = v.assignValues
	_spec.ScanValues = v.scanValues()
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return v, nil
}
