// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/fitzix/assassin/ent/provider"
	"github.com/fitzix/assassin/ent/source"
)

// ProviderCreate is the builder for creating a Provider entity.
type ProviderCreate struct {
	config
	name    *string
	sources map[int]struct{}
}

// SetName sets the name field.
func (pc *ProviderCreate) SetName(s string) *ProviderCreate {
	pc.name = &s
	return pc
}

// AddSourceIDs adds the sources edge to Source by ids.
func (pc *ProviderCreate) AddSourceIDs(ids ...int) *ProviderCreate {
	if pc.sources == nil {
		pc.sources = make(map[int]struct{})
	}
	for i := range ids {
		pc.sources[ids[i]] = struct{}{}
	}
	return pc
}

// AddSources adds the sources edges to Source.
func (pc *ProviderCreate) AddSources(s ...*Source) *ProviderCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pc.AddSourceIDs(ids...)
}

// Save creates the Provider in the database.
func (pc *ProviderCreate) Save(ctx context.Context) (*Provider, error) {
	if pc.name == nil {
		return nil, errors.New("ent: missing required field \"name\"")
	}
	if err := provider.NameValidator(*pc.name); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"name\": %v", err)
	}
	return pc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProviderCreate) SaveX(ctx context.Context) *Provider {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *ProviderCreate) sqlSave(ctx context.Context) (*Provider, error) {
	var (
		pr    = &Provider{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: provider.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: provider.FieldID,
			},
		}
	)
	if value := pc.name; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: provider.FieldName,
		})
		pr.Name = *value
	}
	if nodes := pc.sources; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provider.SourcesTable,
			Columns: []string{provider.SourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: source.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	pr.ID = int(id)
	return pr, nil
}
