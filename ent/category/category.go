// Code generated by entc, DO NOT EDIT.

package category

import (
	"github.com/fitzix/assassin/schema"
)

const (
	// Label holds the string label denoting the category type in the database.
	Label = "category"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name vertex property in the database.
	FieldName = "name"
	// FieldIcon holds the string denoting the icon vertex property in the database.
	FieldIcon = "icon"

	// Table holds the table name of the category in the database.
	Table = "categories"
	// AppsTable is the table the holds the apps relation/edge. The primary key declared below.
	AppsTable = "app_categories"
	// AppsInverseTable is the table name for the App entity.
	// It exists in this package in order to avoid circular dependency with the "app" package.
	AppsInverseTable = "apps"
)

// Columns holds all SQL columns for category fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldIcon,
}

var (
	// AppsPrimaryKey and AppsColumn2 are the table columns denoting the
	// primary key for the apps relation (M2M).
	AppsPrimaryKey = []string{"app_id", "category_id"}
)

var (
	fields = schema.Category{}.Fields()

	// descName is the schema descriptor for name field.
	descName = fields[0].Descriptor()
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator = func() func(string) error {
		validators := descName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()

	// descIcon is the schema descriptor for icon field.
	descIcon = fields[1].Descriptor()
	// IconValidator is a validator for the "icon" field. It is called by the builders before save.
	IconValidator = func() func(string) error {
		validators := descIcon.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(icon string) error {
			for _, fn := range fns {
				if err := fn(icon); err != nil {
					return err
				}
			}
			return nil
		}
	}()
)
