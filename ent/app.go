// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/fitzix/assassin/ent/app"
	"github.com/fitzix/assassin/ent/hot"
)

// App is the model entity for the App schema.
type App struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"-"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Type holds the value of the "type" field.
	Type int8 `json:"type,omitempty"`
	// Icon holds the value of the "icon" field.
	Icon string `json:"icon,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Status holds the value of the "status" field.
	Status int8 `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AppQuery when eager-loading is set.
	Edges AppEdges `json:"edges"`
}

// AppEdges holds the relations/edges for other nodes in the graph.
type AppEdges struct {
	// Tags holds the value of the tags edge.
	Tags []*Tag `json:"tags,omitempty"`
	// Categories holds the value of the categories edge.
	Categories []*Category `json:"categories,omitempty"`
	// Carousels holds the value of the carousels edge.
	Carousels []*Carousel `json:"carousels,omitempty"`
	// Versions holds the value of the versions edge.
	Versions []*Version `json:"versions,omitempty"`
	// Hot holds the value of the hot edge.
	Hot *Hot `json:"hot,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// TagsOrErr returns the Tags value or an error if the edge
// was not loaded in eager-loading.
func (e AppEdges) TagsOrErr() ([]*Tag, error) {
	if e.loadedTypes[0] {
		return e.Tags, nil
	}
	return nil, &NotLoadedError{edge: "tags"}
}

// CategoriesOrErr returns the Categories value or an error if the edge
// was not loaded in eager-loading.
func (e AppEdges) CategoriesOrErr() ([]*Category, error) {
	if e.loadedTypes[1] {
		return e.Categories, nil
	}
	return nil, &NotLoadedError{edge: "categories"}
}

// CarouselsOrErr returns the Carousels value or an error if the edge
// was not loaded in eager-loading.
func (e AppEdges) CarouselsOrErr() ([]*Carousel, error) {
	if e.loadedTypes[2] {
		return e.Carousels, nil
	}
	return nil, &NotLoadedError{edge: "carousels"}
}

// VersionsOrErr returns the Versions value or an error if the edge
// was not loaded in eager-loading.
func (e AppEdges) VersionsOrErr() ([]*Version, error) {
	if e.loadedTypes[3] {
		return e.Versions, nil
	}
	return nil, &NotLoadedError{edge: "versions"}
}

// HotOrErr returns the Hot value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppEdges) HotOrErr() (*Hot, error) {
	if e.loadedTypes[4] {
		if e.Hot == nil {
			// The edge hot was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: hot.Label}
		}
		return e.Hot, nil
	}
	return nil, &NotLoadedError{edge: "hot"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*App) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // created_at
		&sql.NullTime{},   // updated_at
		&sql.NullTime{},   // deleted_at
		&sql.NullString{}, // name
		&sql.NullInt64{},  // type
		&sql.NullString{}, // icon
		&sql.NullString{}, // title
		&sql.NullInt64{},  // status
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the App fields.
func (a *App) assignValues(values ...interface{}) error {
	if m, n := len(values), len(app.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	a.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[0])
	} else if value.Valid {
		a.CreatedAt = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[1])
	} else if value.Valid {
		a.UpdatedAt = value.Time
	}
	if value, ok := values[2].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field deleted_at", values[2])
	} else if value.Valid {
		a.DeletedAt = value.Time
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[3])
	} else if value.Valid {
		a.Name = value.String
	}
	if value, ok := values[4].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field type", values[4])
	} else if value.Valid {
		a.Type = int8(value.Int64)
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field icon", values[5])
	} else if value.Valid {
		a.Icon = value.String
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field title", values[6])
	} else if value.Valid {
		a.Title = value.String
	}
	if value, ok := values[7].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field status", values[7])
	} else if value.Valid {
		a.Status = int8(value.Int64)
	}
	return nil
}

// QueryTags queries the tags edge of the App.
func (a *App) QueryTags() *TagQuery {
	return (&AppClient{config: a.config}).QueryTags(a)
}

// QueryCategories queries the categories edge of the App.
func (a *App) QueryCategories() *CategoryQuery {
	return (&AppClient{config: a.config}).QueryCategories(a)
}

// QueryCarousels queries the carousels edge of the App.
func (a *App) QueryCarousels() *CarouselQuery {
	return (&AppClient{config: a.config}).QueryCarousels(a)
}

// QueryVersions queries the versions edge of the App.
func (a *App) QueryVersions() *VersionQuery {
	return (&AppClient{config: a.config}).QueryVersions(a)
}

// QueryHot queries the hot edge of the App.
func (a *App) QueryHot() *HotQuery {
	return (&AppClient{config: a.config}).QueryHot(a)
}

// Update returns a builder for updating this App.
// Note that, you need to call App.Unwrap() before calling this method, if this App
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *App) Update() *AppUpdateOne {
	return (&AppClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (a *App) Unwrap() *App {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: App is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *App) String() string {
	var builder strings.Builder
	builder.WriteString("App(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", deleted_at=")
	builder.WriteString(a.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(a.Name)
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", a.Type))
	builder.WriteString(", icon=")
	builder.WriteString(a.Icon)
	builder.WriteString(", title=")
	builder.WriteString(a.Title)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", a.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Apps is a parsable slice of App.
type Apps []*App

func (a Apps) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
