// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/fitzix/assassin/ent/carousel"
)

// CarouselCreate is the builder for creating a Carousel entity.
type CarouselCreate struct {
	config
	url *string
}

// SetURL sets the url field.
func (cc *CarouselCreate) SetURL(s string) *CarouselCreate {
	cc.url = &s
	return cc
}

// Save creates the Carousel in the database.
func (cc *CarouselCreate) Save(ctx context.Context) (*Carousel, error) {
	if cc.url == nil {
		return nil, errors.New("ent: missing required field \"url\"")
	}
	if err := carousel.URLValidator(*cc.url); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"url\": %v", err)
	}
	return cc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CarouselCreate) SaveX(ctx context.Context) *Carousel {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cc *CarouselCreate) sqlSave(ctx context.Context) (*Carousel, error) {
	var (
		c     = &Carousel{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: carousel.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: carousel.FieldID,
			},
		}
	)
	if value := cc.url; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: carousel.FieldURL,
		})
		c.URL = *value
	}
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	c.ID = int(id)
	return c, nil
}
