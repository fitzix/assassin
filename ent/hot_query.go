// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/fitzix/assassin/ent/app"
	"github.com/fitzix/assassin/ent/hot"
	"github.com/fitzix/assassin/ent/predicate"
)

// HotQuery is the builder for querying Hot entities.
type HotQuery struct {
	config
	limit      *int
	offset     *int
	order      []Order
	unique     []string
	predicates []predicate.Hot
	// eager-loading edges.
	withApp *AppQuery
	withFKs bool
	// intermediate query.
	sql *sql.Selector
}

// Where adds a new predicate for the builder.
func (hq *HotQuery) Where(ps ...predicate.Hot) *HotQuery {
	hq.predicates = append(hq.predicates, ps...)
	return hq
}

// Limit adds a limit step to the query.
func (hq *HotQuery) Limit(limit int) *HotQuery {
	hq.limit = &limit
	return hq
}

// Offset adds an offset step to the query.
func (hq *HotQuery) Offset(offset int) *HotQuery {
	hq.offset = &offset
	return hq
}

// Order adds an order step to the query.
func (hq *HotQuery) Order(o ...Order) *HotQuery {
	hq.order = append(hq.order, o...)
	return hq
}

// QueryApp chains the current query on the app edge.
func (hq *HotQuery) QueryApp() *AppQuery {
	query := &AppQuery{config: hq.config}
	step := sqlgraph.NewStep(
		sqlgraph.From(hot.Table, hot.FieldID, hq.sqlQuery()),
		sqlgraph.To(app.Table, app.FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, hot.AppTable, hot.AppColumn),
	)
	query.sql = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
	return query
}

// First returns the first Hot entity in the query. Returns *NotFoundError when no hot was found.
func (hq *HotQuery) First(ctx context.Context) (*Hot, error) {
	hs, err := hq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(hs) == 0 {
		return nil, &NotFoundError{hot.Label}
	}
	return hs[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (hq *HotQuery) FirstX(ctx context.Context) *Hot {
	h, err := hq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return h
}

// FirstID returns the first Hot id in the query. Returns *NotFoundError when no id was found.
func (hq *HotQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = hq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{hot.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (hq *HotQuery) FirstXID(ctx context.Context) int {
	id, err := hq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only Hot entity in the query, returns an error if not exactly one entity was returned.
func (hq *HotQuery) Only(ctx context.Context) (*Hot, error) {
	hs, err := hq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(hs) {
	case 1:
		return hs[0], nil
	case 0:
		return nil, &NotFoundError{hot.Label}
	default:
		return nil, &NotSingularError{hot.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (hq *HotQuery) OnlyX(ctx context.Context) *Hot {
	h, err := hq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return h
}

// OnlyID returns the only Hot id in the query, returns an error if not exactly one id was returned.
func (hq *HotQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = hq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{hot.Label}
	default:
		err = &NotSingularError{hot.Label}
	}
	return
}

// OnlyXID is like OnlyID, but panics if an error occurs.
func (hq *HotQuery) OnlyXID(ctx context.Context) int {
	id, err := hq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Hots.
func (hq *HotQuery) All(ctx context.Context) ([]*Hot, error) {
	return hq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (hq *HotQuery) AllX(ctx context.Context) []*Hot {
	hs, err := hq.All(ctx)
	if err != nil {
		panic(err)
	}
	return hs
}

// IDs executes the query and returns a list of Hot ids.
func (hq *HotQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := hq.Select(hot.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (hq *HotQuery) IDsX(ctx context.Context) []int {
	ids, err := hq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (hq *HotQuery) Count(ctx context.Context) (int, error) {
	return hq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (hq *HotQuery) CountX(ctx context.Context) int {
	count, err := hq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (hq *HotQuery) Exist(ctx context.Context) (bool, error) {
	return hq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (hq *HotQuery) ExistX(ctx context.Context) bool {
	exist, err := hq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (hq *HotQuery) Clone() *HotQuery {
	return &HotQuery{
		config:     hq.config,
		limit:      hq.limit,
		offset:     hq.offset,
		order:      append([]Order{}, hq.order...),
		unique:     append([]string{}, hq.unique...),
		predicates: append([]predicate.Hot{}, hq.predicates...),
		// clone intermediate query.
		sql: hq.sql.Clone(),
	}
}

//  WithApp tells the query-builder to eager-loads the nodes that are connected to
// the "app" edge. The optional arguments used to configure the query builder of the edge.
func (hq *HotQuery) WithApp(opts ...func(*AppQuery)) *HotQuery {
	query := &AppQuery{config: hq.config}
	for _, opt := range opts {
		opt(query)
	}
	hq.withApp = query
	return hq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Hot int `json:"hot,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Hot.Query().
//		GroupBy(hot.FieldHot).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (hq *HotQuery) GroupBy(field string, fields ...string) *HotGroupBy {
	group := &HotGroupBy{config: hq.config}
	group.fields = append([]string{field}, fields...)
	group.sql = hq.sqlQuery()
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		Hot int `json:"hot,omitempty"`
//	}
//
//	client.Hot.Query().
//		Select(hot.FieldHot).
//		Scan(ctx, &v)
//
func (hq *HotQuery) Select(field string, fields ...string) *HotSelect {
	selector := &HotSelect{config: hq.config}
	selector.fields = append([]string{field}, fields...)
	selector.sql = hq.sqlQuery()
	return selector
}

func (hq *HotQuery) sqlAll(ctx context.Context) ([]*Hot, error) {
	var (
		nodes       = []*Hot{}
		withFKs     = hq.withFKs
		_spec       = hq.querySpec()
		loadedTypes = [1]bool{
			hq.withApp != nil,
		}
	)
	if hq.withApp != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, hot.ForeignKeys...)
	}
	_spec.ScanValues = func() []interface{} {
		node := &Hot{config: hq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		if withFKs {
			values = append(values, node.fkValues()...)
		}
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, hq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := hq.withApp; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Hot)
		for i := range nodes {
			if fk := nodes[i].app_hot; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(app.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "app_hot" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.App = n
			}
		}
	}

	return nodes, nil
}

func (hq *HotQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := hq.querySpec()
	return sqlgraph.CountNodes(ctx, hq.driver, _spec)
}

func (hq *HotQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := hq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (hq *HotQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   hot.Table,
			Columns: hot.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: hot.FieldID,
			},
		},
		From:   hq.sql,
		Unique: true,
	}
	if ps := hq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := hq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := hq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := hq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (hq *HotQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(hq.driver.Dialect())
	t1 := builder.Table(hot.Table)
	selector := builder.Select(t1.Columns(hot.Columns...)...).From(t1)
	if hq.sql != nil {
		selector = hq.sql
		selector.Select(selector.Columns(hot.Columns...)...)
	}
	for _, p := range hq.predicates {
		p(selector)
	}
	for _, p := range hq.order {
		p(selector)
	}
	if offset := hq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := hq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// HotGroupBy is the builder for group-by Hot entities.
type HotGroupBy struct {
	config
	fields []string
	fns    []Aggregate
	// intermediate query.
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the group-by query.
func (hgb *HotGroupBy) Aggregate(fns ...Aggregate) *HotGroupBy {
	hgb.fns = append(hgb.fns, fns...)
	return hgb
}

// Scan applies the group-by query and scan the result into the given value.
func (hgb *HotGroupBy) Scan(ctx context.Context, v interface{}) error {
	return hgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (hgb *HotGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := hgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (hgb *HotGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(hgb.fields) > 1 {
		return nil, errors.New("ent: HotGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := hgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (hgb *HotGroupBy) StringsX(ctx context.Context) []string {
	v, err := hgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (hgb *HotGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(hgb.fields) > 1 {
		return nil, errors.New("ent: HotGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := hgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (hgb *HotGroupBy) IntsX(ctx context.Context) []int {
	v, err := hgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (hgb *HotGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(hgb.fields) > 1 {
		return nil, errors.New("ent: HotGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := hgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (hgb *HotGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := hgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (hgb *HotGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(hgb.fields) > 1 {
		return nil, errors.New("ent: HotGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := hgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (hgb *HotGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := hgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (hgb *HotGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := hgb.sqlQuery().Query()
	if err := hgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (hgb *HotGroupBy) sqlQuery() *sql.Selector {
	selector := hgb.sql
	columns := make([]string, 0, len(hgb.fields)+len(hgb.fns))
	columns = append(columns, hgb.fields...)
	for _, fn := range hgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(hgb.fields...)
}

// HotSelect is the builder for select fields of Hot entities.
type HotSelect struct {
	config
	fields []string
	// intermediate queries.
	sql *sql.Selector
}

// Scan applies the selector query and scan the result into the given value.
func (hs *HotSelect) Scan(ctx context.Context, v interface{}) error {
	return hs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (hs *HotSelect) ScanX(ctx context.Context, v interface{}) {
	if err := hs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (hs *HotSelect) Strings(ctx context.Context) ([]string, error) {
	if len(hs.fields) > 1 {
		return nil, errors.New("ent: HotSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := hs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (hs *HotSelect) StringsX(ctx context.Context) []string {
	v, err := hs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (hs *HotSelect) Ints(ctx context.Context) ([]int, error) {
	if len(hs.fields) > 1 {
		return nil, errors.New("ent: HotSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := hs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (hs *HotSelect) IntsX(ctx context.Context) []int {
	v, err := hs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (hs *HotSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(hs.fields) > 1 {
		return nil, errors.New("ent: HotSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := hs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (hs *HotSelect) Float64sX(ctx context.Context) []float64 {
	v, err := hs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (hs *HotSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(hs.fields) > 1 {
		return nil, errors.New("ent: HotSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := hs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (hs *HotSelect) BoolsX(ctx context.Context) []bool {
	v, err := hs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (hs *HotSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := hs.sqlQuery().Query()
	if err := hs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (hs *HotSelect) sqlQuery() sql.Querier {
	selector := hs.sql
	selector.Select(selector.Columns(hs.fields...)...)
	return selector
}
