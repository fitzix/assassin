// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/fitzix/assassin/ent/app"
	"github.com/fitzix/assassin/ent/predicate"
	"github.com/fitzix/assassin/ent/source"
	"github.com/fitzix/assassin/ent/version"
)

// VersionQuery is the builder for querying Version entities.
type VersionQuery struct {
	config
	limit      *int
	offset     *int
	order      []Order
	unique     []string
	predicates []predicate.Version
	// eager-loading edges.
	withApp     *AppQuery
	withSources *SourceQuery
	withFKs     bool
	// intermediate query.
	sql *sql.Selector
}

// Where adds a new predicate for the builder.
func (vq *VersionQuery) Where(ps ...predicate.Version) *VersionQuery {
	vq.predicates = append(vq.predicates, ps...)
	return vq
}

// Limit adds a limit step to the query.
func (vq *VersionQuery) Limit(limit int) *VersionQuery {
	vq.limit = &limit
	return vq
}

// Offset adds an offset step to the query.
func (vq *VersionQuery) Offset(offset int) *VersionQuery {
	vq.offset = &offset
	return vq
}

// Order adds an order step to the query.
func (vq *VersionQuery) Order(o ...Order) *VersionQuery {
	vq.order = append(vq.order, o...)
	return vq
}

// QueryApp chains the current query on the app edge.
func (vq *VersionQuery) QueryApp() *AppQuery {
	query := &AppQuery{config: vq.config}
	step := sqlgraph.NewStep(
		sqlgraph.From(version.Table, version.FieldID, vq.sqlQuery()),
		sqlgraph.To(app.Table, app.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, version.AppTable, version.AppColumn),
	)
	query.sql = sqlgraph.SetNeighbors(vq.driver.Dialect(), step)
	return query
}

// QuerySources chains the current query on the sources edge.
func (vq *VersionQuery) QuerySources() *SourceQuery {
	query := &SourceQuery{config: vq.config}
	step := sqlgraph.NewStep(
		sqlgraph.From(version.Table, version.FieldID, vq.sqlQuery()),
		sqlgraph.To(source.Table, source.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, version.SourcesTable, version.SourcesColumn),
	)
	query.sql = sqlgraph.SetNeighbors(vq.driver.Dialect(), step)
	return query
}

// First returns the first Version entity in the query. Returns *NotFoundError when no version was found.
func (vq *VersionQuery) First(ctx context.Context) (*Version, error) {
	vs, err := vq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(vs) == 0 {
		return nil, &NotFoundError{version.Label}
	}
	return vs[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (vq *VersionQuery) FirstX(ctx context.Context) *Version {
	v, err := vq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return v
}

// FirstID returns the first Version id in the query. Returns *NotFoundError when no id was found.
func (vq *VersionQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = vq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{version.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (vq *VersionQuery) FirstXID(ctx context.Context) int {
	id, err := vq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only Version entity in the query, returns an error if not exactly one entity was returned.
func (vq *VersionQuery) Only(ctx context.Context) (*Version, error) {
	vs, err := vq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(vs) {
	case 1:
		return vs[0], nil
	case 0:
		return nil, &NotFoundError{version.Label}
	default:
		return nil, &NotSingularError{version.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (vq *VersionQuery) OnlyX(ctx context.Context) *Version {
	v, err := vq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// OnlyID returns the only Version id in the query, returns an error if not exactly one id was returned.
func (vq *VersionQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = vq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{version.Label}
	default:
		err = &NotSingularError{version.Label}
	}
	return
}

// OnlyXID is like OnlyID, but panics if an error occurs.
func (vq *VersionQuery) OnlyXID(ctx context.Context) int {
	id, err := vq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Versions.
func (vq *VersionQuery) All(ctx context.Context) ([]*Version, error) {
	return vq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (vq *VersionQuery) AllX(ctx context.Context) []*Version {
	vs, err := vq.All(ctx)
	if err != nil {
		panic(err)
	}
	return vs
}

// IDs executes the query and returns a list of Version ids.
func (vq *VersionQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := vq.Select(version.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (vq *VersionQuery) IDsX(ctx context.Context) []int {
	ids, err := vq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (vq *VersionQuery) Count(ctx context.Context) (int, error) {
	return vq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (vq *VersionQuery) CountX(ctx context.Context) int {
	count, err := vq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (vq *VersionQuery) Exist(ctx context.Context) (bool, error) {
	return vq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (vq *VersionQuery) ExistX(ctx context.Context) bool {
	exist, err := vq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (vq *VersionQuery) Clone() *VersionQuery {
	return &VersionQuery{
		config:     vq.config,
		limit:      vq.limit,
		offset:     vq.offset,
		order:      append([]Order{}, vq.order...),
		unique:     append([]string{}, vq.unique...),
		predicates: append([]predicate.Version{}, vq.predicates...),
		// clone intermediate query.
		sql: vq.sql.Clone(),
	}
}

//  WithApp tells the query-builder to eager-loads the nodes that are connected to
// the "app" edge. The optional arguments used to configure the query builder of the edge.
func (vq *VersionQuery) WithApp(opts ...func(*AppQuery)) *VersionQuery {
	query := &AppQuery{config: vq.config}
	for _, opt := range opts {
		opt(query)
	}
	vq.withApp = query
	return vq
}

//  WithSources tells the query-builder to eager-loads the nodes that are connected to
// the "sources" edge. The optional arguments used to configure the query builder of the edge.
func (vq *VersionQuery) WithSources(opts ...func(*SourceQuery)) *VersionQuery {
	query := &SourceQuery{config: vq.config}
	for _, opt := range opts {
		opt(query)
	}
	vq.withSources = query
	return vq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Version.Query().
//		GroupBy(version.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (vq *VersionQuery) GroupBy(field string, fields ...string) *VersionGroupBy {
	group := &VersionGroupBy{config: vq.config}
	group.fields = append([]string{field}, fields...)
	group.sql = vq.sqlQuery()
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Version.Query().
//		Select(version.FieldCreatedAt).
//		Scan(ctx, &v)
//
func (vq *VersionQuery) Select(field string, fields ...string) *VersionSelect {
	selector := &VersionSelect{config: vq.config}
	selector.fields = append([]string{field}, fields...)
	selector.sql = vq.sqlQuery()
	return selector
}

func (vq *VersionQuery) sqlAll(ctx context.Context) ([]*Version, error) {
	var (
		nodes       = []*Version{}
		withFKs     = vq.withFKs
		_spec       = vq.querySpec()
		loadedTypes = [2]bool{
			vq.withApp != nil,
			vq.withSources != nil,
		}
	)
	if vq.withApp != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, version.ForeignKeys...)
	}
	_spec.ScanValues = func() []interface{} {
		node := &Version{config: vq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		if withFKs {
			values = append(values, node.fkValues()...)
		}
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, vq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := vq.withApp; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Version)
		for i := range nodes {
			if fk := nodes[i].app_versions; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(app.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "app_versions" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.App = n
			}
		}
	}

	if query := vq.withSources; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Version)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.Source(func(s *sql.Selector) {
			s.Where(sql.InValues(version.SourcesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.version_sources
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "version_sources" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "version_sources" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Sources = append(node.Edges.Sources, n)
		}
	}

	return nodes, nil
}

func (vq *VersionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := vq.querySpec()
	return sqlgraph.CountNodes(ctx, vq.driver, _spec)
}

func (vq *VersionQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := vq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (vq *VersionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   version.Table,
			Columns: version.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: version.FieldID,
			},
		},
		From:   vq.sql,
		Unique: true,
	}
	if ps := vq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := vq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := vq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := vq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (vq *VersionQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(vq.driver.Dialect())
	t1 := builder.Table(version.Table)
	selector := builder.Select(t1.Columns(version.Columns...)...).From(t1)
	if vq.sql != nil {
		selector = vq.sql
		selector.Select(selector.Columns(version.Columns...)...)
	}
	for _, p := range vq.predicates {
		p(selector)
	}
	for _, p := range vq.order {
		p(selector)
	}
	if offset := vq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := vq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// VersionGroupBy is the builder for group-by Version entities.
type VersionGroupBy struct {
	config
	fields []string
	fns    []Aggregate
	// intermediate query.
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the group-by query.
func (vgb *VersionGroupBy) Aggregate(fns ...Aggregate) *VersionGroupBy {
	vgb.fns = append(vgb.fns, fns...)
	return vgb
}

// Scan applies the group-by query and scan the result into the given value.
func (vgb *VersionGroupBy) Scan(ctx context.Context, v interface{}) error {
	return vgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (vgb *VersionGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := vgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (vgb *VersionGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(vgb.fields) > 1 {
		return nil, errors.New("ent: VersionGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := vgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (vgb *VersionGroupBy) StringsX(ctx context.Context) []string {
	v, err := vgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (vgb *VersionGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(vgb.fields) > 1 {
		return nil, errors.New("ent: VersionGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := vgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (vgb *VersionGroupBy) IntsX(ctx context.Context) []int {
	v, err := vgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (vgb *VersionGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(vgb.fields) > 1 {
		return nil, errors.New("ent: VersionGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := vgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (vgb *VersionGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := vgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (vgb *VersionGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(vgb.fields) > 1 {
		return nil, errors.New("ent: VersionGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := vgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (vgb *VersionGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := vgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (vgb *VersionGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := vgb.sqlQuery().Query()
	if err := vgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (vgb *VersionGroupBy) sqlQuery() *sql.Selector {
	selector := vgb.sql
	columns := make([]string, 0, len(vgb.fields)+len(vgb.fns))
	columns = append(columns, vgb.fields...)
	for _, fn := range vgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(vgb.fields...)
}

// VersionSelect is the builder for select fields of Version entities.
type VersionSelect struct {
	config
	fields []string
	// intermediate queries.
	sql *sql.Selector
}

// Scan applies the selector query and scan the result into the given value.
func (vs *VersionSelect) Scan(ctx context.Context, v interface{}) error {
	return vs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (vs *VersionSelect) ScanX(ctx context.Context, v interface{}) {
	if err := vs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (vs *VersionSelect) Strings(ctx context.Context) ([]string, error) {
	if len(vs.fields) > 1 {
		return nil, errors.New("ent: VersionSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := vs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (vs *VersionSelect) StringsX(ctx context.Context) []string {
	v, err := vs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (vs *VersionSelect) Ints(ctx context.Context) ([]int, error) {
	if len(vs.fields) > 1 {
		return nil, errors.New("ent: VersionSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := vs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (vs *VersionSelect) IntsX(ctx context.Context) []int {
	v, err := vs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (vs *VersionSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(vs.fields) > 1 {
		return nil, errors.New("ent: VersionSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := vs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (vs *VersionSelect) Float64sX(ctx context.Context) []float64 {
	v, err := vs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (vs *VersionSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(vs.fields) > 1 {
		return nil, errors.New("ent: VersionSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := vs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (vs *VersionSelect) BoolsX(ctx context.Context) []bool {
	v, err := vs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (vs *VersionSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := vs.sqlQuery().Query()
	if err := vs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (vs *VersionSelect) sqlQuery() sql.Querier {
	selector := vs.sql
	selector.Select(selector.Columns(vs.fields...)...)
	return selector
}
