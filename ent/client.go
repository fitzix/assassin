// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/fitzix/assassin/ent/migrate"

	"github.com/fitzix/assassin/ent/app"
	"github.com/fitzix/assassin/ent/carousel"
	"github.com/fitzix/assassin/ent/category"
	"github.com/fitzix/assassin/ent/hot"
	"github.com/fitzix/assassin/ent/provider"
	"github.com/fitzix/assassin/ent/role"
	"github.com/fitzix/assassin/ent/source"
	"github.com/fitzix/assassin/ent/tag"
	"github.com/fitzix/assassin/ent/user"
	"github.com/fitzix/assassin/ent/version"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// App is the client for interacting with the App builders.
	App *AppClient
	// Carousel is the client for interacting with the Carousel builders.
	Carousel *CarouselClient
	// Category is the client for interacting with the Category builders.
	Category *CategoryClient
	// Hot is the client for interacting with the Hot builders.
	Hot *HotClient
	// Provider is the client for interacting with the Provider builders.
	Provider *ProviderClient
	// Role is the client for interacting with the Role builders.
	Role *RoleClient
	// Source is the client for interacting with the Source builders.
	Source *SourceClient
	// Tag is the client for interacting with the Tag builders.
	Tag *TagClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// Version is the client for interacting with the Version builders.
	Version *VersionClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	c := config{log: log.Println}
	c.options(opts...)
	return &Client{
		config:   c,
		Schema:   migrate.NewSchema(c.driver),
		App:      NewAppClient(c),
		Carousel: NewCarouselClient(c),
		Category: NewCategoryClient(c),
		Hot:      NewHotClient(c),
		Provider: NewProviderClient(c),
		Role:     NewRoleClient(c),
		Source:   NewSourceClient(c),
		Tag:      NewTagClient(c),
		User:     NewUserClient(c),
		Version:  NewVersionClient(c),
	}
}

// Open opens a connection to the database specified by the driver name and a
// driver-specific data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug}
	return &Tx{
		config:   cfg,
		App:      NewAppClient(cfg),
		Carousel: NewCarouselClient(cfg),
		Category: NewCategoryClient(cfg),
		Hot:      NewHotClient(cfg),
		Provider: NewProviderClient(cfg),
		Role:     NewRoleClient(cfg),
		Source:   NewSourceClient(cfg),
		Tag:      NewTagClient(cfg),
		User:     NewUserClient(cfg),
		Version:  NewVersionClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		App.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true}
	return &Client{
		config:   cfg,
		Schema:   migrate.NewSchema(cfg.driver),
		App:      NewAppClient(cfg),
		Carousel: NewCarouselClient(cfg),
		Category: NewCategoryClient(cfg),
		Hot:      NewHotClient(cfg),
		Provider: NewProviderClient(cfg),
		Role:     NewRoleClient(cfg),
		Source:   NewSourceClient(cfg),
		Tag:      NewTagClient(cfg),
		User:     NewUserClient(cfg),
		Version:  NewVersionClient(cfg),
	}
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// AppClient is a client for the App schema.
type AppClient struct {
	config
}

// NewAppClient returns a client for the App from the given config.
func NewAppClient(c config) *AppClient {
	return &AppClient{config: c}
}

// Create returns a create builder for App.
func (c *AppClient) Create() *AppCreate {
	return &AppCreate{config: c.config}
}

// Update returns an update builder for App.
func (c *AppClient) Update() *AppUpdate {
	return &AppUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppClient) UpdateOne(a *App) *AppUpdateOne {
	return c.UpdateOneID(a.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *AppClient) UpdateOneID(id int) *AppUpdateOne {
	return &AppUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for App.
func (c *AppClient) Delete() *AppDelete {
	return &AppDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AppClient) DeleteOne(a *App) *AppDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AppClient) DeleteOneID(id int) *AppDeleteOne {
	return &AppDeleteOne{c.Delete().Where(app.ID(id))}
}

// Create returns a query builder for App.
func (c *AppClient) Query() *AppQuery {
	return &AppQuery{config: c.config}
}

// Get returns a App entity by its id.
func (c *AppClient) Get(ctx context.Context, id int) (*App, error) {
	return c.Query().Where(app.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppClient) GetX(ctx context.Context, id int) *App {
	a, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return a
}

// QueryTags queries the tags edge of a App.
func (c *AppClient) QueryTags(a *App) *TagQuery {
	query := &TagQuery{config: c.config}
	id := a.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(app.Table, app.FieldID, id),
		sqlgraph.To(tag.Table, tag.FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, app.TagsTable, app.TagsPrimaryKey...),
	)
	query.sql = sqlgraph.Neighbors(a.driver.Dialect(), step)

	return query
}

// QueryCategories queries the categories edge of a App.
func (c *AppClient) QueryCategories(a *App) *CategoryQuery {
	query := &CategoryQuery{config: c.config}
	id := a.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(app.Table, app.FieldID, id),
		sqlgraph.To(category.Table, category.FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, app.CategoriesTable, app.CategoriesPrimaryKey...),
	)
	query.sql = sqlgraph.Neighbors(a.driver.Dialect(), step)

	return query
}

// QueryCarousels queries the carousels edge of a App.
func (c *AppClient) QueryCarousels(a *App) *CarouselQuery {
	query := &CarouselQuery{config: c.config}
	id := a.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(app.Table, app.FieldID, id),
		sqlgraph.To(carousel.Table, carousel.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, app.CarouselsTable, app.CarouselsColumn),
	)
	query.sql = sqlgraph.Neighbors(a.driver.Dialect(), step)

	return query
}

// QueryVersions queries the versions edge of a App.
func (c *AppClient) QueryVersions(a *App) *VersionQuery {
	query := &VersionQuery{config: c.config}
	id := a.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(app.Table, app.FieldID, id),
		sqlgraph.To(version.Table, version.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, app.VersionsTable, app.VersionsColumn),
	)
	query.sql = sqlgraph.Neighbors(a.driver.Dialect(), step)

	return query
}

// QueryHot queries the hot edge of a App.
func (c *AppClient) QueryHot(a *App) *HotQuery {
	query := &HotQuery{config: c.config}
	id := a.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(app.Table, app.FieldID, id),
		sqlgraph.To(hot.Table, hot.FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, app.HotTable, app.HotColumn),
	)
	query.sql = sqlgraph.Neighbors(a.driver.Dialect(), step)

	return query
}

// CarouselClient is a client for the Carousel schema.
type CarouselClient struct {
	config
}

// NewCarouselClient returns a client for the Carousel from the given config.
func NewCarouselClient(c config) *CarouselClient {
	return &CarouselClient{config: c}
}

// Create returns a create builder for Carousel.
func (c *CarouselClient) Create() *CarouselCreate {
	return &CarouselCreate{config: c.config}
}

// Update returns an update builder for Carousel.
func (c *CarouselClient) Update() *CarouselUpdate {
	return &CarouselUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *CarouselClient) UpdateOne(ca *Carousel) *CarouselUpdateOne {
	return c.UpdateOneID(ca.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *CarouselClient) UpdateOneID(id int) *CarouselUpdateOne {
	return &CarouselUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for Carousel.
func (c *CarouselClient) Delete() *CarouselDelete {
	return &CarouselDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CarouselClient) DeleteOne(ca *Carousel) *CarouselDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CarouselClient) DeleteOneID(id int) *CarouselDeleteOne {
	return &CarouselDeleteOne{c.Delete().Where(carousel.ID(id))}
}

// Create returns a query builder for Carousel.
func (c *CarouselClient) Query() *CarouselQuery {
	return &CarouselQuery{config: c.config}
}

// Get returns a Carousel entity by its id.
func (c *CarouselClient) Get(ctx context.Context, id int) (*Carousel, error) {
	return c.Query().Where(carousel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CarouselClient) GetX(ctx context.Context, id int) *Carousel {
	ca, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return ca
}

// CategoryClient is a client for the Category schema.
type CategoryClient struct {
	config
}

// NewCategoryClient returns a client for the Category from the given config.
func NewCategoryClient(c config) *CategoryClient {
	return &CategoryClient{config: c}
}

// Create returns a create builder for Category.
func (c *CategoryClient) Create() *CategoryCreate {
	return &CategoryCreate{config: c.config}
}

// Update returns an update builder for Category.
func (c *CategoryClient) Update() *CategoryUpdate {
	return &CategoryUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *CategoryClient) UpdateOne(ca *Category) *CategoryUpdateOne {
	return c.UpdateOneID(ca.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *CategoryClient) UpdateOneID(id int) *CategoryUpdateOne {
	return &CategoryUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for Category.
func (c *CategoryClient) Delete() *CategoryDelete {
	return &CategoryDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CategoryClient) DeleteOne(ca *Category) *CategoryDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CategoryClient) DeleteOneID(id int) *CategoryDeleteOne {
	return &CategoryDeleteOne{c.Delete().Where(category.ID(id))}
}

// Create returns a query builder for Category.
func (c *CategoryClient) Query() *CategoryQuery {
	return &CategoryQuery{config: c.config}
}

// Get returns a Category entity by its id.
func (c *CategoryClient) Get(ctx context.Context, id int) (*Category, error) {
	return c.Query().Where(category.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CategoryClient) GetX(ctx context.Context, id int) *Category {
	ca, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return ca
}

// QueryApps queries the apps edge of a Category.
func (c *CategoryClient) QueryApps(ca *Category) *AppQuery {
	query := &AppQuery{config: c.config}
	id := ca.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(category.Table, category.FieldID, id),
		sqlgraph.To(app.Table, app.FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, category.AppsTable, category.AppsPrimaryKey...),
	)
	query.sql = sqlgraph.Neighbors(ca.driver.Dialect(), step)

	return query
}

// HotClient is a client for the Hot schema.
type HotClient struct {
	config
}

// NewHotClient returns a client for the Hot from the given config.
func NewHotClient(c config) *HotClient {
	return &HotClient{config: c}
}

// Create returns a create builder for Hot.
func (c *HotClient) Create() *HotCreate {
	return &HotCreate{config: c.config}
}

// Update returns an update builder for Hot.
func (c *HotClient) Update() *HotUpdate {
	return &HotUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *HotClient) UpdateOne(h *Hot) *HotUpdateOne {
	return c.UpdateOneID(h.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *HotClient) UpdateOneID(id int) *HotUpdateOne {
	return &HotUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for Hot.
func (c *HotClient) Delete() *HotDelete {
	return &HotDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *HotClient) DeleteOne(h *Hot) *HotDeleteOne {
	return c.DeleteOneID(h.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *HotClient) DeleteOneID(id int) *HotDeleteOne {
	return &HotDeleteOne{c.Delete().Where(hot.ID(id))}
}

// Create returns a query builder for Hot.
func (c *HotClient) Query() *HotQuery {
	return &HotQuery{config: c.config}
}

// Get returns a Hot entity by its id.
func (c *HotClient) Get(ctx context.Context, id int) (*Hot, error) {
	return c.Query().Where(hot.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HotClient) GetX(ctx context.Context, id int) *Hot {
	h, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return h
}

// QueryApp queries the app edge of a Hot.
func (c *HotClient) QueryApp(h *Hot) *AppQuery {
	query := &AppQuery{config: c.config}
	id := h.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(hot.Table, hot.FieldID, id),
		sqlgraph.To(app.Table, app.FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, hot.AppTable, hot.AppColumn),
	)
	query.sql = sqlgraph.Neighbors(h.driver.Dialect(), step)

	return query
}

// ProviderClient is a client for the Provider schema.
type ProviderClient struct {
	config
}

// NewProviderClient returns a client for the Provider from the given config.
func NewProviderClient(c config) *ProviderClient {
	return &ProviderClient{config: c}
}

// Create returns a create builder for Provider.
func (c *ProviderClient) Create() *ProviderCreate {
	return &ProviderCreate{config: c.config}
}

// Update returns an update builder for Provider.
func (c *ProviderClient) Update() *ProviderUpdate {
	return &ProviderUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProviderClient) UpdateOne(pr *Provider) *ProviderUpdateOne {
	return c.UpdateOneID(pr.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *ProviderClient) UpdateOneID(id int) *ProviderUpdateOne {
	return &ProviderUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for Provider.
func (c *ProviderClient) Delete() *ProviderDelete {
	return &ProviderDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProviderClient) DeleteOne(pr *Provider) *ProviderDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProviderClient) DeleteOneID(id int) *ProviderDeleteOne {
	return &ProviderDeleteOne{c.Delete().Where(provider.ID(id))}
}

// Create returns a query builder for Provider.
func (c *ProviderClient) Query() *ProviderQuery {
	return &ProviderQuery{config: c.config}
}

// Get returns a Provider entity by its id.
func (c *ProviderClient) Get(ctx context.Context, id int) (*Provider, error) {
	return c.Query().Where(provider.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProviderClient) GetX(ctx context.Context, id int) *Provider {
	pr, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pr
}

// QuerySources queries the sources edge of a Provider.
func (c *ProviderClient) QuerySources(pr *Provider) *SourceQuery {
	query := &SourceQuery{config: c.config}
	id := pr.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(provider.Table, provider.FieldID, id),
		sqlgraph.To(source.Table, source.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, provider.SourcesTable, provider.SourcesColumn),
	)
	query.sql = sqlgraph.Neighbors(pr.driver.Dialect(), step)

	return query
}

// RoleClient is a client for the Role schema.
type RoleClient struct {
	config
}

// NewRoleClient returns a client for the Role from the given config.
func NewRoleClient(c config) *RoleClient {
	return &RoleClient{config: c}
}

// Create returns a create builder for Role.
func (c *RoleClient) Create() *RoleCreate {
	return &RoleCreate{config: c.config}
}

// Update returns an update builder for Role.
func (c *RoleClient) Update() *RoleUpdate {
	return &RoleUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoleClient) UpdateOne(r *Role) *RoleUpdateOne {
	return c.UpdateOneID(r.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *RoleClient) UpdateOneID(id int) *RoleUpdateOne {
	return &RoleUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for Role.
func (c *RoleClient) Delete() *RoleDelete {
	return &RoleDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RoleClient) DeleteOne(r *Role) *RoleDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RoleClient) DeleteOneID(id int) *RoleDeleteOne {
	return &RoleDeleteOne{c.Delete().Where(role.ID(id))}
}

// Create returns a query builder for Role.
func (c *RoleClient) Query() *RoleQuery {
	return &RoleQuery{config: c.config}
}

// Get returns a Role entity by its id.
func (c *RoleClient) Get(ctx context.Context, id int) (*Role, error) {
	return c.Query().Where(role.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoleClient) GetX(ctx context.Context, id int) *Role {
	r, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return r
}

// SourceClient is a client for the Source schema.
type SourceClient struct {
	config
}

// NewSourceClient returns a client for the Source from the given config.
func NewSourceClient(c config) *SourceClient {
	return &SourceClient{config: c}
}

// Create returns a create builder for Source.
func (c *SourceClient) Create() *SourceCreate {
	return &SourceCreate{config: c.config}
}

// Update returns an update builder for Source.
func (c *SourceClient) Update() *SourceUpdate {
	return &SourceUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *SourceClient) UpdateOne(s *Source) *SourceUpdateOne {
	return c.UpdateOneID(s.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *SourceClient) UpdateOneID(id int) *SourceUpdateOne {
	return &SourceUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for Source.
func (c *SourceClient) Delete() *SourceDelete {
	return &SourceDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SourceClient) DeleteOne(s *Source) *SourceDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SourceClient) DeleteOneID(id int) *SourceDeleteOne {
	return &SourceDeleteOne{c.Delete().Where(source.ID(id))}
}

// Create returns a query builder for Source.
func (c *SourceClient) Query() *SourceQuery {
	return &SourceQuery{config: c.config}
}

// Get returns a Source entity by its id.
func (c *SourceClient) Get(ctx context.Context, id int) (*Source, error) {
	return c.Query().Where(source.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SourceClient) GetX(ctx context.Context, id int) *Source {
	s, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return s
}

// QueryVendor queries the vendor edge of a Source.
func (c *SourceClient) QueryVendor(s *Source) *ProviderQuery {
	query := &ProviderQuery{config: c.config}
	id := s.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(source.Table, source.FieldID, id),
		sqlgraph.To(provider.Table, provider.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, source.VendorTable, source.VendorColumn),
	)
	query.sql = sqlgraph.Neighbors(s.driver.Dialect(), step)

	return query
}

// QueryVersion queries the version edge of a Source.
func (c *SourceClient) QueryVersion(s *Source) *VersionQuery {
	query := &VersionQuery{config: c.config}
	id := s.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(source.Table, source.FieldID, id),
		sqlgraph.To(version.Table, version.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, source.VersionTable, source.VersionColumn),
	)
	query.sql = sqlgraph.Neighbors(s.driver.Dialect(), step)

	return query
}

// TagClient is a client for the Tag schema.
type TagClient struct {
	config
}

// NewTagClient returns a client for the Tag from the given config.
func NewTagClient(c config) *TagClient {
	return &TagClient{config: c}
}

// Create returns a create builder for Tag.
func (c *TagClient) Create() *TagCreate {
	return &TagCreate{config: c.config}
}

// Update returns an update builder for Tag.
func (c *TagClient) Update() *TagUpdate {
	return &TagUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *TagClient) UpdateOne(t *Tag) *TagUpdateOne {
	return c.UpdateOneID(t.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *TagClient) UpdateOneID(id int) *TagUpdateOne {
	return &TagUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for Tag.
func (c *TagClient) Delete() *TagDelete {
	return &TagDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TagClient) DeleteOne(t *Tag) *TagDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TagClient) DeleteOneID(id int) *TagDeleteOne {
	return &TagDeleteOne{c.Delete().Where(tag.ID(id))}
}

// Create returns a query builder for Tag.
func (c *TagClient) Query() *TagQuery {
	return &TagQuery{config: c.config}
}

// Get returns a Tag entity by its id.
func (c *TagClient) Get(ctx context.Context, id int) (*Tag, error) {
	return c.Query().Where(tag.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TagClient) GetX(ctx context.Context, id int) *Tag {
	t, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return t
}

// QueryApp queries the app edge of a Tag.
func (c *TagClient) QueryApp(t *Tag) *AppQuery {
	query := &AppQuery{config: c.config}
	id := t.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(tag.Table, tag.FieldID, id),
		sqlgraph.To(app.Table, app.FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, tag.AppTable, tag.AppPrimaryKey...),
	)
	query.sql = sqlgraph.Neighbors(t.driver.Dialect(), step)

	return query
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	return &UserCreate{config: c.config}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	return &UserUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	return c.UpdateOneID(u.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	return &UserUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	return &UserDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	return &UserDeleteOne{c.Delete().Where(user.ID(id))}
}

// Create returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{config: c.config}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	u, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return u
}

// QueryRole queries the role edge of a User.
func (c *UserClient) QueryRole(u *User) *RoleQuery {
	query := &RoleQuery{config: c.config}
	id := u.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(user.Table, user.FieldID, id),
		sqlgraph.To(role.Table, role.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, user.RoleTable, user.RoleColumn),
	)
	query.sql = sqlgraph.Neighbors(u.driver.Dialect(), step)

	return query
}

// VersionClient is a client for the Version schema.
type VersionClient struct {
	config
}

// NewVersionClient returns a client for the Version from the given config.
func NewVersionClient(c config) *VersionClient {
	return &VersionClient{config: c}
}

// Create returns a create builder for Version.
func (c *VersionClient) Create() *VersionCreate {
	return &VersionCreate{config: c.config}
}

// Update returns an update builder for Version.
func (c *VersionClient) Update() *VersionUpdate {
	return &VersionUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *VersionClient) UpdateOne(v *Version) *VersionUpdateOne {
	return c.UpdateOneID(v.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *VersionClient) UpdateOneID(id int) *VersionUpdateOne {
	return &VersionUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for Version.
func (c *VersionClient) Delete() *VersionDelete {
	return &VersionDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *VersionClient) DeleteOne(v *Version) *VersionDeleteOne {
	return c.DeleteOneID(v.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *VersionClient) DeleteOneID(id int) *VersionDeleteOne {
	return &VersionDeleteOne{c.Delete().Where(version.ID(id))}
}

// Create returns a query builder for Version.
func (c *VersionClient) Query() *VersionQuery {
	return &VersionQuery{config: c.config}
}

// Get returns a Version entity by its id.
func (c *VersionClient) Get(ctx context.Context, id int) (*Version, error) {
	return c.Query().Where(version.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VersionClient) GetX(ctx context.Context, id int) *Version {
	v, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return v
}

// QueryApp queries the app edge of a Version.
func (c *VersionClient) QueryApp(v *Version) *AppQuery {
	query := &AppQuery{config: c.config}
	id := v.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(version.Table, version.FieldID, id),
		sqlgraph.To(app.Table, app.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, version.AppTable, version.AppColumn),
	)
	query.sql = sqlgraph.Neighbors(v.driver.Dialect(), step)

	return query
}

// QuerySources queries the sources edge of a Version.
func (c *VersionClient) QuerySources(v *Version) *SourceQuery {
	query := &SourceQuery{config: c.config}
	id := v.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(version.Table, version.FieldID, id),
		sqlgraph.To(source.Table, source.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, version.SourcesTable, version.SourcesColumn),
	)
	query.sql = sqlgraph.Neighbors(v.driver.Dialect(), step)

	return query
}
