// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/fitzix/assassin/ent/predicate"
	"github.com/fitzix/assassin/ent/provider"
	"github.com/fitzix/assassin/ent/source"
	"github.com/fitzix/assassin/ent/version"
)

// SourceUpdate is the builder for updating Source entities.
type SourceUpdate struct {
	config
	url             *string
	secret          *string
	clearsecret     bool
	provider        map[int]struct{}
	version         map[int]struct{}
	clearedProvider bool
	clearedVersion  bool
	predicates      []predicate.Source
}

// Where adds a new predicate for the builder.
func (su *SourceUpdate) Where(ps ...predicate.Source) *SourceUpdate {
	su.predicates = append(su.predicates, ps...)
	return su
}

// SetURL sets the url field.
func (su *SourceUpdate) SetURL(s string) *SourceUpdate {
	su.url = &s
	return su
}

// SetSecret sets the secret field.
func (su *SourceUpdate) SetSecret(s string) *SourceUpdate {
	su.secret = &s
	return su
}

// SetNillableSecret sets the secret field if the given value is not nil.
func (su *SourceUpdate) SetNillableSecret(s *string) *SourceUpdate {
	if s != nil {
		su.SetSecret(*s)
	}
	return su
}

// ClearSecret clears the value of secret.
func (su *SourceUpdate) ClearSecret() *SourceUpdate {
	su.secret = nil
	su.clearsecret = true
	return su
}

// SetProviderID sets the provider edge to Provider by id.
func (su *SourceUpdate) SetProviderID(id int) *SourceUpdate {
	if su.provider == nil {
		su.provider = make(map[int]struct{})
	}
	su.provider[id] = struct{}{}
	return su
}

// SetProvider sets the provider edge to Provider.
func (su *SourceUpdate) SetProvider(p *Provider) *SourceUpdate {
	return su.SetProviderID(p.ID)
}

// SetVersionID sets the version edge to Version by id.
func (su *SourceUpdate) SetVersionID(id int) *SourceUpdate {
	if su.version == nil {
		su.version = make(map[int]struct{})
	}
	su.version[id] = struct{}{}
	return su
}

// SetVersion sets the version edge to Version.
func (su *SourceUpdate) SetVersion(v *Version) *SourceUpdate {
	return su.SetVersionID(v.ID)
}

// ClearProvider clears the provider edge to Provider.
func (su *SourceUpdate) ClearProvider() *SourceUpdate {
	su.clearedProvider = true
	return su
}

// ClearVersion clears the version edge to Version.
func (su *SourceUpdate) ClearVersion() *SourceUpdate {
	su.clearedVersion = true
	return su
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (su *SourceUpdate) Save(ctx context.Context) (int, error) {
	if su.url != nil {
		if err := source.URLValidator(*su.url); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"url\": %v", err)
		}
	}
	if len(su.provider) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"provider\"")
	}
	if su.clearedProvider && su.provider == nil {
		return 0, errors.New("ent: clearing a unique edge \"provider\"")
	}
	if len(su.version) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"version\"")
	}
	if su.clearedVersion && su.version == nil {
		return 0, errors.New("ent: clearing a unique edge \"version\"")
	}
	return su.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SourceUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SourceUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SourceUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   source.Table,
			Columns: source.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: source.FieldID,
			},
		},
	}
	if ps := su.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := su.url; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: source.FieldURL,
		})
	}
	if value := su.secret; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: source.FieldSecret,
		})
	}
	if su.clearsecret {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: source.FieldSecret,
		})
	}
	if su.clearedProvider {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   source.ProviderTable,
			Columns: []string{source.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.provider; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   source.ProviderTable,
			Columns: []string{source.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provider.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.clearedVersion {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   source.VersionTable,
			Columns: []string{source.VersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: version.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.version; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   source.VersionTable,
			Columns: []string{source.VersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: version.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{source.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// SourceUpdateOne is the builder for updating a single Source entity.
type SourceUpdateOne struct {
	config
	id              int
	url             *string
	secret          *string
	clearsecret     bool
	provider        map[int]struct{}
	version         map[int]struct{}
	clearedProvider bool
	clearedVersion  bool
}

// SetURL sets the url field.
func (suo *SourceUpdateOne) SetURL(s string) *SourceUpdateOne {
	suo.url = &s
	return suo
}

// SetSecret sets the secret field.
func (suo *SourceUpdateOne) SetSecret(s string) *SourceUpdateOne {
	suo.secret = &s
	return suo
}

// SetNillableSecret sets the secret field if the given value is not nil.
func (suo *SourceUpdateOne) SetNillableSecret(s *string) *SourceUpdateOne {
	if s != nil {
		suo.SetSecret(*s)
	}
	return suo
}

// ClearSecret clears the value of secret.
func (suo *SourceUpdateOne) ClearSecret() *SourceUpdateOne {
	suo.secret = nil
	suo.clearsecret = true
	return suo
}

// SetProviderID sets the provider edge to Provider by id.
func (suo *SourceUpdateOne) SetProviderID(id int) *SourceUpdateOne {
	if suo.provider == nil {
		suo.provider = make(map[int]struct{})
	}
	suo.provider[id] = struct{}{}
	return suo
}

// SetProvider sets the provider edge to Provider.
func (suo *SourceUpdateOne) SetProvider(p *Provider) *SourceUpdateOne {
	return suo.SetProviderID(p.ID)
}

// SetVersionID sets the version edge to Version by id.
func (suo *SourceUpdateOne) SetVersionID(id int) *SourceUpdateOne {
	if suo.version == nil {
		suo.version = make(map[int]struct{})
	}
	suo.version[id] = struct{}{}
	return suo
}

// SetVersion sets the version edge to Version.
func (suo *SourceUpdateOne) SetVersion(v *Version) *SourceUpdateOne {
	return suo.SetVersionID(v.ID)
}

// ClearProvider clears the provider edge to Provider.
func (suo *SourceUpdateOne) ClearProvider() *SourceUpdateOne {
	suo.clearedProvider = true
	return suo
}

// ClearVersion clears the version edge to Version.
func (suo *SourceUpdateOne) ClearVersion() *SourceUpdateOne {
	suo.clearedVersion = true
	return suo
}

// Save executes the query and returns the updated entity.
func (suo *SourceUpdateOne) Save(ctx context.Context) (*Source, error) {
	if suo.url != nil {
		if err := source.URLValidator(*suo.url); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"url\": %v", err)
		}
	}
	if len(suo.provider) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"provider\"")
	}
	if suo.clearedProvider && suo.provider == nil {
		return nil, errors.New("ent: clearing a unique edge \"provider\"")
	}
	if len(suo.version) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"version\"")
	}
	if suo.clearedVersion && suo.version == nil {
		return nil, errors.New("ent: clearing a unique edge \"version\"")
	}
	return suo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SourceUpdateOne) SaveX(ctx context.Context) *Source {
	s, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return s
}

// Exec executes the query on the entity.
func (suo *SourceUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SourceUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SourceUpdateOne) sqlSave(ctx context.Context) (s *Source, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   source.Table,
			Columns: source.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  suo.id,
				Type:   field.TypeInt,
				Column: source.FieldID,
			},
		},
	}
	if value := suo.url; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: source.FieldURL,
		})
	}
	if value := suo.secret; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: source.FieldSecret,
		})
	}
	if suo.clearsecret {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: source.FieldSecret,
		})
	}
	if suo.clearedProvider {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   source.ProviderTable,
			Columns: []string{source.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.provider; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   source.ProviderTable,
			Columns: []string{source.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provider.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.clearedVersion {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   source.VersionTable,
			Columns: []string{source.VersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: version.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.version; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   source.VersionTable,
			Columns: []string{source.VersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: version.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	s = &Source{config: suo.config}
	_spec.Assign = s.assignValues
	_spec.ScanValues = s.scanValues()
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{source.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return s, nil
}
