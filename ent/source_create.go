// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/fitzix/assassin/ent/provider"
	"github.com/fitzix/assassin/ent/source"
	"github.com/fitzix/assassin/ent/version"
)

// SourceCreate is the builder for creating a Source entity.
type SourceCreate struct {
	config
	url     *string
	secret  *string
	vendor  map[int]struct{}
	version map[int]struct{}
}

// SetURL sets the url field.
func (sc *SourceCreate) SetURL(s string) *SourceCreate {
	sc.url = &s
	return sc
}

// SetSecret sets the secret field.
func (sc *SourceCreate) SetSecret(s string) *SourceCreate {
	sc.secret = &s
	return sc
}

// SetNillableSecret sets the secret field if the given value is not nil.
func (sc *SourceCreate) SetNillableSecret(s *string) *SourceCreate {
	if s != nil {
		sc.SetSecret(*s)
	}
	return sc
}

// SetVendorID sets the vendor edge to Provider by id.
func (sc *SourceCreate) SetVendorID(id int) *SourceCreate {
	if sc.vendor == nil {
		sc.vendor = make(map[int]struct{})
	}
	sc.vendor[id] = struct{}{}
	return sc
}

// SetVendor sets the vendor edge to Provider.
func (sc *SourceCreate) SetVendor(p *Provider) *SourceCreate {
	return sc.SetVendorID(p.ID)
}

// SetVersionID sets the version edge to Version by id.
func (sc *SourceCreate) SetVersionID(id int) *SourceCreate {
	if sc.version == nil {
		sc.version = make(map[int]struct{})
	}
	sc.version[id] = struct{}{}
	return sc
}

// SetVersion sets the version edge to Version.
func (sc *SourceCreate) SetVersion(v *Version) *SourceCreate {
	return sc.SetVersionID(v.ID)
}

// Save creates the Source in the database.
func (sc *SourceCreate) Save(ctx context.Context) (*Source, error) {
	if sc.url == nil {
		return nil, errors.New("ent: missing required field \"url\"")
	}
	if err := source.URLValidator(*sc.url); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"url\": %v", err)
	}
	if len(sc.vendor) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"vendor\"")
	}
	if sc.vendor == nil {
		return nil, errors.New("ent: missing required edge \"vendor\"")
	}
	if len(sc.version) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"version\"")
	}
	if sc.version == nil {
		return nil, errors.New("ent: missing required edge \"version\"")
	}
	return sc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SourceCreate) SaveX(ctx context.Context) *Source {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sc *SourceCreate) sqlSave(ctx context.Context) (*Source, error) {
	var (
		s     = &Source{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: source.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: source.FieldID,
			},
		}
	)
	if value := sc.url; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: source.FieldURL,
		})
		s.URL = *value
	}
	if value := sc.secret; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: source.FieldSecret,
		})
		s.Secret = *value
	}
	if nodes := sc.vendor; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   source.VendorTable,
			Columns: []string{source.VendorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provider.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.version; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   source.VersionTable,
			Columns: []string{source.VersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: version.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	s.ID = int(id)
	return s, nil
}
