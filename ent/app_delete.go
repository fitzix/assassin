// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/fitzix/assassin/ent/app"
	"github.com/fitzix/assassin/ent/predicate"
)

// AppDelete is the builder for deleting a App entity.
type AppDelete struct {
	config
	predicates []predicate.App
}

// Where adds a new predicate to the delete builder.
func (ad *AppDelete) Where(ps ...predicate.App) *AppDelete {
	ad.predicates = append(ad.predicates, ps...)
	return ad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ad *AppDelete) Exec(ctx context.Context) (int, error) {
	return ad.sqlExec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (ad *AppDelete) ExecX(ctx context.Context) int {
	n, err := ad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ad *AppDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := &sqlgraph.DeleteSpec{
		Node: &sqlgraph.NodeSpec{
			Table: app.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: app.FieldID,
			},
		},
	}
	if ps := ad.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return sqlgraph.DeleteNodes(ctx, ad.driver, _spec)
}

// AppDeleteOne is the builder for deleting a single App entity.
type AppDeleteOne struct {
	ad *AppDelete
}

// Exec executes the deletion query.
func (ado *AppDeleteOne) Exec(ctx context.Context) error {
	n, err := ado.ad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{app.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ado *AppDeleteOne) ExecX(ctx context.Context) {
	ado.ad.ExecX(ctx)
}
