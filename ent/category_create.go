// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/fitzix/assassin/ent/app"
	"github.com/fitzix/assassin/ent/category"
)

// CategoryCreate is the builder for creating a Category entity.
type CategoryCreate struct {
	config
	name *string
	icon *string
	apps map[int]struct{}
}

// SetName sets the name field.
func (cc *CategoryCreate) SetName(s string) *CategoryCreate {
	cc.name = &s
	return cc
}

// SetIcon sets the icon field.
func (cc *CategoryCreate) SetIcon(s string) *CategoryCreate {
	cc.icon = &s
	return cc
}

// AddAppIDs adds the apps edge to App by ids.
func (cc *CategoryCreate) AddAppIDs(ids ...int) *CategoryCreate {
	if cc.apps == nil {
		cc.apps = make(map[int]struct{})
	}
	for i := range ids {
		cc.apps[ids[i]] = struct{}{}
	}
	return cc
}

// AddApps adds the apps edges to App.
func (cc *CategoryCreate) AddApps(a ...*App) *CategoryCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cc.AddAppIDs(ids...)
}

// Save creates the Category in the database.
func (cc *CategoryCreate) Save(ctx context.Context) (*Category, error) {
	if cc.name == nil {
		return nil, errors.New("ent: missing required field \"name\"")
	}
	if err := category.NameValidator(*cc.name); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"name\": %v", err)
	}
	if cc.icon == nil {
		return nil, errors.New("ent: missing required field \"icon\"")
	}
	if err := category.IconValidator(*cc.icon); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"icon\": %v", err)
	}
	return cc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CategoryCreate) SaveX(ctx context.Context) *Category {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cc *CategoryCreate) sqlSave(ctx context.Context) (*Category, error) {
	var (
		c     = &Category{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: category.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: category.FieldID,
			},
		}
	)
	if value := cc.name; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: category.FieldName,
		})
		c.Name = *value
	}
	if value := cc.icon; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: category.FieldIcon,
		})
		c.Icon = *value
	}
	if nodes := cc.apps; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   category.AppsTable,
			Columns: category.AppsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	c.ID = int(id)
	return c, nil
}
