// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/fitzix/assassin/ent/carousel"
)

// Carousel is the model entity for the Carousel schema.
type Carousel struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// URL holds the value of the "url" field.
	URL           string `json:"url,omitempty"`
	app_carousels *int
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Carousel) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // url
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Carousel) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // app_carousels
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Carousel fields.
func (c *Carousel) assignValues(values ...interface{}) error {
	if m, n := len(values), len(carousel.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	c.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field url", values[0])
	} else if value.Valid {
		c.URL = value.String
	}
	values = values[1:]
	if len(values) == len(carousel.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field app_carousels", value)
		} else if value.Valid {
			c.app_carousels = new(int)
			*c.app_carousels = int(value.Int64)
		}
	}
	return nil
}

// Update returns a builder for updating this Carousel.
// Note that, you need to call Carousel.Unwrap() before calling this method, if this Carousel
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Carousel) Update() *CarouselUpdateOne {
	return (&CarouselClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (c *Carousel) Unwrap() *Carousel {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Carousel is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Carousel) String() string {
	var builder strings.Builder
	builder.WriteString("Carousel(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", url=")
	builder.WriteString(c.URL)
	builder.WriteByte(')')
	return builder.String()
}

// Carousels is a parsable slice of Carousel.
type Carousels []*Carousel

func (c Carousels) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
