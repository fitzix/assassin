// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"log"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"

	"github.com/fitzix/assassin/ent/app"
	"github.com/fitzix/assassin/ent/user"
	"github.com/fitzix/assassin/ent/version"
)

// dsn for the database. In order to run the tests locally, run the following command:
//
//	 ENT_INTEGRATION_ENDPOINT="root:pass@tcp(localhost:3306)/test?parseTime=True" go test -v
//
var dsn string

func ExampleApp() {
	if dsn == "" {
		return
	}
	ctx := context.Background()
	drv, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("failed creating database client: %v", err)
	}
	defer drv.Close()
	client := NewClient(Driver(drv))
	// creating vertices for the app's edges.
	t0 := client.Tag.
		Create().
		SetName("string").
		SaveX(ctx)
	log.Println("tag created:", t0)
	c1 := client.Category.
		Create().
		SetName("string").
		SetIcon("string").
		SaveX(ctx)
	log.Println("category created:", c1)
	c2 := client.Carousel.
		Create().
		SetURL("string").
		SaveX(ctx)
	log.Println("carousel created:", c2)
	v3 := client.Version.
		Create().
		SetCreatedAt(time.Now()).
		SetName("string").
		SetVersion("string").
		SetSize("string").
		SetStatus(version.StatusNormal).
		SaveX(ctx)
	log.Println("version created:", v3)
	h4 := client.Hot.
		Create().
		SetHot(1).
		SetView(1).
		SaveX(ctx)
	log.Println("hot created:", h4)

	// create app vertex with its edges.
	a := client.App.
		Create().
		SetCreatedAt(time.Now()).
		SetUpdatedAt(time.Now()).
		SetDeletedAt(time.Now()).
		SetName("string").
		SetType(app.TypeApp).
		SetIcon("string").
		SetTitle("string").
		SetStatus(app.StatusNormal).
		AddTags(t0).
		AddCategories(c1).
		AddCarousels(c2).
		AddVersions(v3).
		SetHot(h4).
		SaveX(ctx)
	log.Println("app created:", a)

	// query edges.
	t0, err = a.QueryTags().First(ctx)
	if err != nil {
		log.Fatalf("failed querying tags: %v", err)
	}
	log.Println("tags found:", t0)

	c1, err = a.QueryCategories().First(ctx)
	if err != nil {
		log.Fatalf("failed querying categories: %v", err)
	}
	log.Println("categories found:", c1)

	c2, err = a.QueryCarousels().First(ctx)
	if err != nil {
		log.Fatalf("failed querying carousels: %v", err)
	}
	log.Println("carousels found:", c2)

	v3, err = a.QueryVersions().First(ctx)
	if err != nil {
		log.Fatalf("failed querying versions: %v", err)
	}
	log.Println("versions found:", v3)

	h4, err = a.QueryHot().First(ctx)
	if err != nil {
		log.Fatalf("failed querying hot: %v", err)
	}
	log.Println("hot found:", h4)

	// Output:
}
func ExampleCarousel() {
	if dsn == "" {
		return
	}
	ctx := context.Background()
	drv, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("failed creating database client: %v", err)
	}
	defer drv.Close()
	client := NewClient(Driver(drv))
	// creating vertices for the carousel's edges.

	// create carousel vertex with its edges.
	c := client.Carousel.
		Create().
		SetURL("string").
		SaveX(ctx)
	log.Println("carousel created:", c)

	// query edges.

	// Output:
}
func ExampleCategory() {
	if dsn == "" {
		return
	}
	ctx := context.Background()
	drv, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("failed creating database client: %v", err)
	}
	defer drv.Close()
	client := NewClient(Driver(drv))
	// creating vertices for the category's edges.

	// create category vertex with its edges.
	c := client.Category.
		Create().
		SetName("string").
		SetIcon("string").
		SaveX(ctx)
	log.Println("category created:", c)

	// query edges.

	// Output:
}
func ExampleHot() {
	if dsn == "" {
		return
	}
	ctx := context.Background()
	drv, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("failed creating database client: %v", err)
	}
	defer drv.Close()
	client := NewClient(Driver(drv))
	// creating vertices for the hot's edges.

	// create hot vertex with its edges.
	h := client.Hot.
		Create().
		SetHot(1).
		SetView(1).
		SaveX(ctx)
	log.Println("hot created:", h)

	// query edges.

	// Output:
}
func ExampleProvider() {
	if dsn == "" {
		return
	}
	ctx := context.Background()
	drv, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("failed creating database client: %v", err)
	}
	defer drv.Close()
	client := NewClient(Driver(drv))
	// creating vertices for the provider's edges.
	s0 := client.Source.
		Create().
		SetURL("string").
		SetSecret("string").
		SaveX(ctx)
	log.Println("source created:", s0)

	// create provider vertex with its edges.
	pr := client.Provider.
		Create().
		SetName("string").
		AddSources(s0).
		SaveX(ctx)
	log.Println("provider created:", pr)

	// query edges.
	s0, err = pr.QuerySources().First(ctx)
	if err != nil {
		log.Fatalf("failed querying sources: %v", err)
	}
	log.Println("sources found:", s0)

	// Output:
}
func ExampleRole() {
	if dsn == "" {
		return
	}
	ctx := context.Background()
	drv, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("failed creating database client: %v", err)
	}
	defer drv.Close()
	client := NewClient(Driver(drv))
	// creating vertices for the role's edges.

	// create role vertex with its edges.
	r := client.Role.
		Create().
		SetName("string").
		SaveX(ctx)
	log.Println("role created:", r)

	// query edges.

	// Output:
}
func ExampleSource() {
	if dsn == "" {
		return
	}
	ctx := context.Background()
	drv, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("failed creating database client: %v", err)
	}
	defer drv.Close()
	client := NewClient(Driver(drv))
	// creating vertices for the source's edges.

	// create source vertex with its edges.
	s := client.Source.
		Create().
		SetURL("string").
		SetSecret("string").
		SaveX(ctx)
	log.Println("source created:", s)

	// query edges.

	// Output:
}
func ExampleTag() {
	if dsn == "" {
		return
	}
	ctx := context.Background()
	drv, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("failed creating database client: %v", err)
	}
	defer drv.Close()
	client := NewClient(Driver(drv))
	// creating vertices for the tag's edges.

	// create tag vertex with its edges.
	t := client.Tag.
		Create().
		SetName("string").
		SaveX(ctx)
	log.Println("tag created:", t)

	// query edges.

	// Output:
}
func ExampleUser() {
	if dsn == "" {
		return
	}
	ctx := context.Background()
	drv, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("failed creating database client: %v", err)
	}
	defer drv.Close()
	client := NewClient(Driver(drv))
	// creating vertices for the user's edges.
	r0 := client.Role.
		Create().
		SetName("string").
		SaveX(ctx)
	log.Println("role created:", r0)

	// create user vertex with its edges.
	u := client.User.
		Create().
		SetName("string").
		SetPassword("string").
		SetCode(1).
		SetStatus(user.StatusNormal).
		SetRole(r0).
		SaveX(ctx)
	log.Println("user created:", u)

	// query edges.
	r0, err = u.QueryRole().First(ctx)
	if err != nil {
		log.Fatalf("failed querying role: %v", err)
	}
	log.Println("role found:", r0)

	// Output:
}
func ExampleVersion() {
	if dsn == "" {
		return
	}
	ctx := context.Background()
	drv, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("failed creating database client: %v", err)
	}
	defer drv.Close()
	client := NewClient(Driver(drv))
	// creating vertices for the version's edges.
	s1 := client.Source.
		Create().
		SetURL("string").
		SetSecret("string").
		SaveX(ctx)
	log.Println("source created:", s1)

	// create version vertex with its edges.
	v := client.Version.
		Create().
		SetCreatedAt(time.Now()).
		SetName("string").
		SetVersion("string").
		SetSize("string").
		SetStatus(version.StatusNormal).
		AddSources(s1).
		SaveX(ctx)
	log.Println("version created:", v)

	// query edges.

	s1, err = v.QuerySources().First(ctx)
	if err != nil {
		log.Fatalf("failed querying sources: %v", err)
	}
	log.Println("sources found:", s1)

	// Output:
}
