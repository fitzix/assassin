// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/fitzix/assassin/ent/app"
	"github.com/fitzix/assassin/ent/version"
)

// Version is the model entity for the Version schema.
type Version struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Version holds the value of the "version" field.
	Version string `json:"version,omitempty"`
	// Size holds the value of the "size" field.
	Size string `json:"size,omitempty"`
	// Status holds the value of the "status" field.
	Status int8 `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VersionQuery when eager-loading is set.
	Edges        VersionEdges `json:"edges"`
	app_versions *int
}

// VersionEdges holds the relations/edges for other nodes in the graph.
type VersionEdges struct {
	// App holds the value of the app edge.
	App *App
	// Sources holds the value of the sources edge.
	Sources []*Source
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AppOrErr returns the App value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VersionEdges) AppOrErr() (*App, error) {
	if e.loadedTypes[0] {
		if e.App == nil {
			// The edge app was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: app.Label}
		}
		return e.App, nil
	}
	return nil, &NotLoadedError{edge: "app"}
}

// SourcesOrErr returns the Sources value or an error if the edge
// was not loaded in eager-loading.
func (e VersionEdges) SourcesOrErr() ([]*Source, error) {
	if e.loadedTypes[1] {
		return e.Sources, nil
	}
	return nil, &NotLoadedError{edge: "sources"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Version) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // created_at
		&sql.NullString{}, // name
		&sql.NullString{}, // version
		&sql.NullString{}, // size
		&sql.NullInt64{},  // status
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Version) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // app_versions
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Version fields.
func (v *Version) assignValues(values ...interface{}) error {
	if m, n := len(values), len(version.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	v.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[0])
	} else if value.Valid {
		v.CreatedAt = value.Time
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[1])
	} else if value.Valid {
		v.Name = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field version", values[2])
	} else if value.Valid {
		v.Version = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field size", values[3])
	} else if value.Valid {
		v.Size = value.String
	}
	if value, ok := values[4].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field status", values[4])
	} else if value.Valid {
		v.Status = int8(value.Int64)
	}
	values = values[5:]
	if len(values) == len(version.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field app_versions", value)
		} else if value.Valid {
			v.app_versions = new(int)
			*v.app_versions = int(value.Int64)
		}
	}
	return nil
}

// QueryApp queries the app edge of the Version.
func (v *Version) QueryApp() *AppQuery {
	return (&VersionClient{config: v.config}).QueryApp(v)
}

// QuerySources queries the sources edge of the Version.
func (v *Version) QuerySources() *SourceQuery {
	return (&VersionClient{config: v.config}).QuerySources(v)
}

// Update returns a builder for updating this Version.
// Note that, you need to call Version.Unwrap() before calling this method, if this Version
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Version) Update() *VersionUpdateOne {
	return (&VersionClient{config: v.config}).UpdateOne(v)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (v *Version) Unwrap() *Version {
	tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Version is not a transactional entity")
	}
	v.config.driver = tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Version) String() string {
	var builder strings.Builder
	builder.WriteString("Version(")
	builder.WriteString(fmt.Sprintf("id=%v", v.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(v.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(v.Name)
	builder.WriteString(", version=")
	builder.WriteString(v.Version)
	builder.WriteString(", size=")
	builder.WriteString(v.Size)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", v.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Versions is a parsable slice of Version.
type Versions []*Version

func (v Versions) config(cfg config) {
	for _i := range v {
		v[_i].config = cfg
	}
}
