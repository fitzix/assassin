// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/fitzix/assassin/ent/app"
	"github.com/fitzix/assassin/ent/hot"
	"github.com/fitzix/assassin/ent/predicate"
)

// HotUpdate is the builder for updating Hot entities.
type HotUpdate struct {
	config
	hot        *int
	addhot     *int
	view       *int
	addview    *int
	app        map[int]struct{}
	clearedApp bool
	predicates []predicate.Hot
}

// Where adds a new predicate for the builder.
func (hu *HotUpdate) Where(ps ...predicate.Hot) *HotUpdate {
	hu.predicates = append(hu.predicates, ps...)
	return hu
}

// SetHot sets the hot field.
func (hu *HotUpdate) SetHot(i int) *HotUpdate {
	hu.hot = &i
	hu.addhot = nil
	return hu
}

// SetNillableHot sets the hot field if the given value is not nil.
func (hu *HotUpdate) SetNillableHot(i *int) *HotUpdate {
	if i != nil {
		hu.SetHot(*i)
	}
	return hu
}

// AddHot adds i to hot.
func (hu *HotUpdate) AddHot(i int) *HotUpdate {
	if hu.addhot == nil {
		hu.addhot = &i
	} else {
		*hu.addhot += i
	}
	return hu
}

// SetView sets the view field.
func (hu *HotUpdate) SetView(i int) *HotUpdate {
	hu.view = &i
	hu.addview = nil
	return hu
}

// SetNillableView sets the view field if the given value is not nil.
func (hu *HotUpdate) SetNillableView(i *int) *HotUpdate {
	if i != nil {
		hu.SetView(*i)
	}
	return hu
}

// AddView adds i to view.
func (hu *HotUpdate) AddView(i int) *HotUpdate {
	if hu.addview == nil {
		hu.addview = &i
	} else {
		*hu.addview += i
	}
	return hu
}

// SetAppID sets the app edge to App by id.
func (hu *HotUpdate) SetAppID(id int) *HotUpdate {
	if hu.app == nil {
		hu.app = make(map[int]struct{})
	}
	hu.app[id] = struct{}{}
	return hu
}

// SetApp sets the app edge to App.
func (hu *HotUpdate) SetApp(a *App) *HotUpdate {
	return hu.SetAppID(a.ID)
}

// ClearApp clears the app edge to App.
func (hu *HotUpdate) ClearApp() *HotUpdate {
	hu.clearedApp = true
	return hu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (hu *HotUpdate) Save(ctx context.Context) (int, error) {
	if len(hu.app) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"app\"")
	}
	if hu.clearedApp && hu.app == nil {
		return 0, errors.New("ent: clearing a unique edge \"app\"")
	}
	return hu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (hu *HotUpdate) SaveX(ctx context.Context) int {
	affected, err := hu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hu *HotUpdate) Exec(ctx context.Context) error {
	_, err := hu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hu *HotUpdate) ExecX(ctx context.Context) {
	if err := hu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hu *HotUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   hot.Table,
			Columns: hot.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: hot.FieldID,
			},
		},
	}
	if ps := hu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := hu.hot; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: hot.FieldHot,
		})
	}
	if value := hu.addhot; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: hot.FieldHot,
		})
	}
	if value := hu.view; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: hot.FieldView,
		})
	}
	if value := hu.addview; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: hot.FieldView,
		})
	}
	if hu.clearedApp {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   hot.AppTable,
			Columns: []string{hot.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.app; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   hot.AppTable,
			Columns: []string{hot.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hot.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// HotUpdateOne is the builder for updating a single Hot entity.
type HotUpdateOne struct {
	config
	id         int
	hot        *int
	addhot     *int
	view       *int
	addview    *int
	app        map[int]struct{}
	clearedApp bool
}

// SetHot sets the hot field.
func (huo *HotUpdateOne) SetHot(i int) *HotUpdateOne {
	huo.hot = &i
	huo.addhot = nil
	return huo
}

// SetNillableHot sets the hot field if the given value is not nil.
func (huo *HotUpdateOne) SetNillableHot(i *int) *HotUpdateOne {
	if i != nil {
		huo.SetHot(*i)
	}
	return huo
}

// AddHot adds i to hot.
func (huo *HotUpdateOne) AddHot(i int) *HotUpdateOne {
	if huo.addhot == nil {
		huo.addhot = &i
	} else {
		*huo.addhot += i
	}
	return huo
}

// SetView sets the view field.
func (huo *HotUpdateOne) SetView(i int) *HotUpdateOne {
	huo.view = &i
	huo.addview = nil
	return huo
}

// SetNillableView sets the view field if the given value is not nil.
func (huo *HotUpdateOne) SetNillableView(i *int) *HotUpdateOne {
	if i != nil {
		huo.SetView(*i)
	}
	return huo
}

// AddView adds i to view.
func (huo *HotUpdateOne) AddView(i int) *HotUpdateOne {
	if huo.addview == nil {
		huo.addview = &i
	} else {
		*huo.addview += i
	}
	return huo
}

// SetAppID sets the app edge to App by id.
func (huo *HotUpdateOne) SetAppID(id int) *HotUpdateOne {
	if huo.app == nil {
		huo.app = make(map[int]struct{})
	}
	huo.app[id] = struct{}{}
	return huo
}

// SetApp sets the app edge to App.
func (huo *HotUpdateOne) SetApp(a *App) *HotUpdateOne {
	return huo.SetAppID(a.ID)
}

// ClearApp clears the app edge to App.
func (huo *HotUpdateOne) ClearApp() *HotUpdateOne {
	huo.clearedApp = true
	return huo
}

// Save executes the query and returns the updated entity.
func (huo *HotUpdateOne) Save(ctx context.Context) (*Hot, error) {
	if len(huo.app) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"app\"")
	}
	if huo.clearedApp && huo.app == nil {
		return nil, errors.New("ent: clearing a unique edge \"app\"")
	}
	return huo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (huo *HotUpdateOne) SaveX(ctx context.Context) *Hot {
	h, err := huo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return h
}

// Exec executes the query on the entity.
func (huo *HotUpdateOne) Exec(ctx context.Context) error {
	_, err := huo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (huo *HotUpdateOne) ExecX(ctx context.Context) {
	if err := huo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (huo *HotUpdateOne) sqlSave(ctx context.Context) (h *Hot, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   hot.Table,
			Columns: hot.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  huo.id,
				Type:   field.TypeInt,
				Column: hot.FieldID,
			},
		},
	}
	if value := huo.hot; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: hot.FieldHot,
		})
	}
	if value := huo.addhot; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: hot.FieldHot,
		})
	}
	if value := huo.view; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: hot.FieldView,
		})
	}
	if value := huo.addview; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: hot.FieldView,
		})
	}
	if huo.clearedApp {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   hot.AppTable,
			Columns: []string{hot.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.app; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   hot.AppTable,
			Columns: []string{hot.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	h = &Hot{config: huo.config}
	_spec.Assign = h.assignValues
	_spec.ScanValues = h.scanValues()
	if err = sqlgraph.UpdateNode(ctx, huo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hot.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return h, nil
}
