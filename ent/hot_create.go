// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/fitzix/assassin/ent/app"
	"github.com/fitzix/assassin/ent/hot"
)

// HotCreate is the builder for creating a Hot entity.
type HotCreate struct {
	config
	hot  *int
	view *int
	app  map[int]struct{}
}

// SetHot sets the hot field.
func (hc *HotCreate) SetHot(i int) *HotCreate {
	hc.hot = &i
	return hc
}

// SetNillableHot sets the hot field if the given value is not nil.
func (hc *HotCreate) SetNillableHot(i *int) *HotCreate {
	if i != nil {
		hc.SetHot(*i)
	}
	return hc
}

// SetView sets the view field.
func (hc *HotCreate) SetView(i int) *HotCreate {
	hc.view = &i
	return hc
}

// SetNillableView sets the view field if the given value is not nil.
func (hc *HotCreate) SetNillableView(i *int) *HotCreate {
	if i != nil {
		hc.SetView(*i)
	}
	return hc
}

// SetAppID sets the app edge to App by id.
func (hc *HotCreate) SetAppID(id int) *HotCreate {
	if hc.app == nil {
		hc.app = make(map[int]struct{})
	}
	hc.app[id] = struct{}{}
	return hc
}

// SetApp sets the app edge to App.
func (hc *HotCreate) SetApp(a *App) *HotCreate {
	return hc.SetAppID(a.ID)
}

// Save creates the Hot in the database.
func (hc *HotCreate) Save(ctx context.Context) (*Hot, error) {
	if hc.hot == nil {
		v := hot.DefaultHot
		hc.hot = &v
	}
	if hc.view == nil {
		v := hot.DefaultView
		hc.view = &v
	}
	if len(hc.app) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"app\"")
	}
	if hc.app == nil {
		return nil, errors.New("ent: missing required edge \"app\"")
	}
	return hc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (hc *HotCreate) SaveX(ctx context.Context) *Hot {
	v, err := hc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (hc *HotCreate) sqlSave(ctx context.Context) (*Hot, error) {
	var (
		h     = &Hot{config: hc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: hot.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: hot.FieldID,
			},
		}
	)
	if value := hc.hot; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: hot.FieldHot,
		})
		h.Hot = *value
	}
	if value := hc.view; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: hot.FieldView,
		})
		h.View = *value
	}
	if nodes := hc.app; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   hot.AppTable,
			Columns: []string{hot.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, hc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	h.ID = int(id)
	return h, nil
}
