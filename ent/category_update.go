// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/fitzix/assassin/ent/app"
	"github.com/fitzix/assassin/ent/category"
	"github.com/fitzix/assassin/ent/predicate"
)

// CategoryUpdate is the builder for updating Category entities.
type CategoryUpdate struct {
	config
	name        *string
	icon        *string
	apps        map[int]struct{}
	removedApps map[int]struct{}
	predicates  []predicate.Category
}

// Where adds a new predicate for the builder.
func (cu *CategoryUpdate) Where(ps ...predicate.Category) *CategoryUpdate {
	cu.predicates = append(cu.predicates, ps...)
	return cu
}

// SetName sets the name field.
func (cu *CategoryUpdate) SetName(s string) *CategoryUpdate {
	cu.name = &s
	return cu
}

// SetIcon sets the icon field.
func (cu *CategoryUpdate) SetIcon(s string) *CategoryUpdate {
	cu.icon = &s
	return cu
}

// AddAppIDs adds the apps edge to App by ids.
func (cu *CategoryUpdate) AddAppIDs(ids ...int) *CategoryUpdate {
	if cu.apps == nil {
		cu.apps = make(map[int]struct{})
	}
	for i := range ids {
		cu.apps[ids[i]] = struct{}{}
	}
	return cu
}

// AddApps adds the apps edges to App.
func (cu *CategoryUpdate) AddApps(a ...*App) *CategoryUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.AddAppIDs(ids...)
}

// RemoveAppIDs removes the apps edge to App by ids.
func (cu *CategoryUpdate) RemoveAppIDs(ids ...int) *CategoryUpdate {
	if cu.removedApps == nil {
		cu.removedApps = make(map[int]struct{})
	}
	for i := range ids {
		cu.removedApps[ids[i]] = struct{}{}
	}
	return cu
}

// RemoveApps removes apps edges to App.
func (cu *CategoryUpdate) RemoveApps(a ...*App) *CategoryUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.RemoveAppIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (cu *CategoryUpdate) Save(ctx context.Context) (int, error) {
	if cu.name != nil {
		if err := category.NameValidator(*cu.name); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"name\": %v", err)
		}
	}
	if cu.icon != nil {
		if err := category.IconValidator(*cu.icon); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"icon\": %v", err)
		}
	}
	return cu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CategoryUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CategoryUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *CategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   category.Table,
			Columns: category.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: category.FieldID,
			},
		},
	}
	if ps := cu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := cu.name; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: category.FieldName,
		})
	}
	if value := cu.icon; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: category.FieldIcon,
		})
	}
	if nodes := cu.removedApps; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   category.AppsTable,
			Columns: category.AppsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.apps; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   category.AppsTable,
			Columns: category.AppsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{category.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CategoryUpdateOne is the builder for updating a single Category entity.
type CategoryUpdateOne struct {
	config
	id          int
	name        *string
	icon        *string
	apps        map[int]struct{}
	removedApps map[int]struct{}
}

// SetName sets the name field.
func (cuo *CategoryUpdateOne) SetName(s string) *CategoryUpdateOne {
	cuo.name = &s
	return cuo
}

// SetIcon sets the icon field.
func (cuo *CategoryUpdateOne) SetIcon(s string) *CategoryUpdateOne {
	cuo.icon = &s
	return cuo
}

// AddAppIDs adds the apps edge to App by ids.
func (cuo *CategoryUpdateOne) AddAppIDs(ids ...int) *CategoryUpdateOne {
	if cuo.apps == nil {
		cuo.apps = make(map[int]struct{})
	}
	for i := range ids {
		cuo.apps[ids[i]] = struct{}{}
	}
	return cuo
}

// AddApps adds the apps edges to App.
func (cuo *CategoryUpdateOne) AddApps(a ...*App) *CategoryUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.AddAppIDs(ids...)
}

// RemoveAppIDs removes the apps edge to App by ids.
func (cuo *CategoryUpdateOne) RemoveAppIDs(ids ...int) *CategoryUpdateOne {
	if cuo.removedApps == nil {
		cuo.removedApps = make(map[int]struct{})
	}
	for i := range ids {
		cuo.removedApps[ids[i]] = struct{}{}
	}
	return cuo
}

// RemoveApps removes apps edges to App.
func (cuo *CategoryUpdateOne) RemoveApps(a ...*App) *CategoryUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.RemoveAppIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (cuo *CategoryUpdateOne) Save(ctx context.Context) (*Category, error) {
	if cuo.name != nil {
		if err := category.NameValidator(*cuo.name); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"name\": %v", err)
		}
	}
	if cuo.icon != nil {
		if err := category.IconValidator(*cuo.icon); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"icon\": %v", err)
		}
	}
	return cuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CategoryUpdateOne) SaveX(ctx context.Context) *Category {
	c, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return c
}

// Exec executes the query on the entity.
func (cuo *CategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CategoryUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *CategoryUpdateOne) sqlSave(ctx context.Context) (c *Category, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   category.Table,
			Columns: category.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  cuo.id,
				Type:   field.TypeInt,
				Column: category.FieldID,
			},
		},
	}
	if value := cuo.name; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: category.FieldName,
		})
	}
	if value := cuo.icon; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: category.FieldIcon,
		})
	}
	if nodes := cuo.removedApps; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   category.AppsTable,
			Columns: category.AppsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.apps; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   category.AppsTable,
			Columns: category.AppsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	c = &Category{config: cuo.config}
	_spec.Assign = c.assignValues
	_spec.ScanValues = c.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{category.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return c, nil
}
