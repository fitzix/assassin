// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/fitzix/assassin/ent/predicate"
	"github.com/fitzix/assassin/ent/version"
)

// VersionDelete is the builder for deleting a Version entity.
type VersionDelete struct {
	config
	predicates []predicate.Version
}

// Where adds a new predicate to the delete builder.
func (vd *VersionDelete) Where(ps ...predicate.Version) *VersionDelete {
	vd.predicates = append(vd.predicates, ps...)
	return vd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (vd *VersionDelete) Exec(ctx context.Context) (int, error) {
	return vd.sqlExec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (vd *VersionDelete) ExecX(ctx context.Context) int {
	n, err := vd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (vd *VersionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := &sqlgraph.DeleteSpec{
		Node: &sqlgraph.NodeSpec{
			Table: version.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: version.FieldID,
			},
		},
	}
	if ps := vd.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return sqlgraph.DeleteNodes(ctx, vd.driver, _spec)
}

// VersionDeleteOne is the builder for deleting a single Version entity.
type VersionDeleteOne struct {
	vd *VersionDelete
}

// Exec executes the deletion query.
func (vdo *VersionDeleteOne) Exec(ctx context.Context) error {
	n, err := vdo.vd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{version.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (vdo *VersionDeleteOne) ExecX(ctx context.Context) {
	vdo.vd.ExecX(ctx)
}
