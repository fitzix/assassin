// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// App is an object representing the database table.
type App struct {
	ID        string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	HotID     int         `boil:"hot_id" json:"-" toml:"-" yaml:"-"`
	Name      string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Type      int16       `boil:"type" json:"type" toml:"type" yaml:"type"`
	Icon      string      `boil:"icon" json:"icon" toml:"icon" yaml:"icon"`
	Title     null.String `boil:"title" json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	Category  int16       `boil:"category" json:"category" toml:"category" yaml:"category"`
	CreatedAt time.Time   `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	UpdatedAt time.Time   `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	DeletedAt null.Time   `boil:"deleted_at" json:"-" toml:"-" yaml:"-"`
	Status    bool        `boil:"status" json:"status" toml:"status" yaml:"status"`

	R *appR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L appL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AppColumns = struct {
	ID        string
	HotID     string
	Name      string
	Type      string
	Icon      string
	Title     string
	Category  string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
	Status    string
}{
	ID:        "id",
	HotID:     "hot_id",
	Name:      "name",
	Type:      "type",
	Icon:      "icon",
	Title:     "title",
	Category:  "category",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
	Status:    "status",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

type whereHelperint16 struct{ field string }

func (w whereHelperint16) EQ(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint16) NEQ(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint16) LT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint16) LTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint16) GT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint16) GTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint16) IN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var AppWhere = struct {
	ID        whereHelperstring
	HotID     whereHelperint
	Name      whereHelperstring
	Type      whereHelperint16
	Icon      whereHelperstring
	Title     whereHelpernull_String
	Category  whereHelperint16
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	DeletedAt whereHelpernull_Time
	Status    whereHelperbool
}{
	ID:        whereHelperstring{field: "\"app\".\"id\""},
	HotID:     whereHelperint{field: "\"app\".\"hot_id\""},
	Name:      whereHelperstring{field: "\"app\".\"name\""},
	Type:      whereHelperint16{field: "\"app\".\"type\""},
	Icon:      whereHelperstring{field: "\"app\".\"icon\""},
	Title:     whereHelpernull_String{field: "\"app\".\"title\""},
	Category:  whereHelperint16{field: "\"app\".\"category\""},
	CreatedAt: whereHelpertime_Time{field: "\"app\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"app\".\"updated_at\""},
	DeletedAt: whereHelpernull_Time{field: "\"app\".\"deleted_at\""},
	Status:    whereHelperbool{field: "\"app\".\"status\""},
}

// AppRels is where relationship names are stored.
var AppRels = struct {
	Hot        string
	Categories string
	Tags       string
	Carousels  string
	Versions   string
}{
	Hot:        "Hot",
	Categories: "Categories",
	Tags:       "Tags",
	Carousels:  "Carousels",
	Versions:   "Versions",
}

// appR is where relationships are stored.
type appR struct {
	Hot        *Hot
	Categories CategorySlice
	Tags       TagSlice
	Carousels  CarouselSlice
	Versions   VersionSlice
}

// NewStruct creates a new relationship struct
func (*appR) NewStruct() *appR {
	return &appR{}
}

// appL is where Load methods for each relationship are stored.
type appL struct{}

var (
	appAllColumns            = []string{"id", "hot_id", "name", "type", "icon", "title", "category", "created_at", "updated_at", "deleted_at", "status"}
	appColumnsWithoutDefault = []string{"id", "hot_id", "name", "icon", "title", "created_at", "updated_at", "deleted_at"}
	appColumnsWithDefault    = []string{"type", "category", "status"}
	appPrimaryKeyColumns     = []string{"id"}
)

type (
	// AppSlice is an alias for a slice of pointers to App.
	// This should generally be used opposed to []App.
	AppSlice []*App

	appQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	appType                 = reflect.TypeOf(&App{})
	appMapping              = queries.MakeStructMapping(appType)
	appPrimaryKeyMapping, _ = queries.BindMapping(appType, appMapping, appPrimaryKeyColumns)
	appInsertCacheMut       sync.RWMutex
	appInsertCache          = make(map[string]insertCache)
	appUpdateCacheMut       sync.RWMutex
	appUpdateCache          = make(map[string]updateCache)
	appUpsertCacheMut       sync.RWMutex
	appUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single app record from the query.
func (q appQuery) One(exec boil.Executor) (*App, error) {
	o := &App{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for app")
	}

	return o, nil
}

// All returns all App records from the query.
func (q appQuery) All(exec boil.Executor) (AppSlice, error) {
	var o []*App

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to App slice")
	}

	return o, nil
}

// Count returns the count of all App records in the query.
func (q appQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count app rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q appQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if app exists")
	}

	return count > 0, nil
}

// Hot pointed to by the foreign key.
func (o *App) Hot(mods ...qm.QueryMod) hotQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.HotID),
	}

	queryMods = append(queryMods, mods...)

	query := Hots(queryMods...)
	queries.SetFrom(query.Query, "\"hot\"")

	return query
}

// Categories retrieves all the category's Categories with an executor.
func (o *App) Categories(mods ...qm.QueryMod) categoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"app_category\" on \"category\".\"id\" = \"app_category\".\"category_id\""),
		qm.Where("\"app_category\".\"app_id\"=?", o.ID),
	)

	query := Categories(queryMods...)
	queries.SetFrom(query.Query, "\"category\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"category\".*"})
	}

	return query
}

// Tags retrieves all the tag's Tags with an executor.
func (o *App) Tags(mods ...qm.QueryMod) tagQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"app_tag\" on \"tag\".\"id\" = \"app_tag\".\"tag_id\""),
		qm.Where("\"app_tag\".\"app_id\"=?", o.ID),
	)

	query := Tags(queryMods...)
	queries.SetFrom(query.Query, "\"tag\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"tag\".*"})
	}

	return query
}

// Carousels retrieves all the carousel's Carousels with an executor.
func (o *App) Carousels(mods ...qm.QueryMod) carouselQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"carousel\".\"app_id\"=?", o.ID),
	)

	query := Carousels(queryMods...)
	queries.SetFrom(query.Query, "\"carousel\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"carousel\".*"})
	}

	return query
}

// Versions retrieves all the version's Versions with an executor.
func (o *App) Versions(mods ...qm.QueryMod) versionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"version\".\"app_id\"=?", o.ID),
	)

	query := Versions(queryMods...)
	queries.SetFrom(query.Query, "\"version\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"version\".*"})
	}

	return query
}

// LoadHot allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (appL) LoadHot(e boil.Executor, singular bool, maybeApp interface{}, mods queries.Applicator) error {
	var slice []*App
	var object *App

	if singular {
		object = maybeApp.(*App)
	} else {
		slice = *maybeApp.(*[]*App)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &appR{}
		}
		args = append(args, object.HotID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &appR{}
			}

			for _, a := range args {
				if a == obj.HotID {
					continue Outer
				}
			}

			args = append(args, obj.HotID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`hot`), qm.WhereIn(`hot.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Hot")
	}

	var resultSlice []*Hot
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Hot")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for hot")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for hot")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Hot = foreign
		if foreign.R == nil {
			foreign.R = &hotR{}
		}
		foreign.R.Apps = append(foreign.R.Apps, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.HotID == foreign.ID {
				local.R.Hot = foreign
				if foreign.R == nil {
					foreign.R = &hotR{}
				}
				foreign.R.Apps = append(foreign.R.Apps, local)
				break
			}
		}
	}

	return nil
}

// LoadCategories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (appL) LoadCategories(e boil.Executor, singular bool, maybeApp interface{}, mods queries.Applicator) error {
	var slice []*App
	var object *App

	if singular {
		object = maybeApp.(*App)
	} else {
		slice = *maybeApp.(*[]*App)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &appR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &appR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"category\".*, \"a\".\"app_id\""),
		qm.From("\"category\""),
		qm.InnerJoin("\"app_category\" as \"a\" on \"category\".\"id\" = \"a\".\"category_id\""),
		qm.WhereIn("\"a\".\"app_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load category")
	}

	var resultSlice []*Category

	var localJoinCols []string
	for results.Next() {
		one := new(Category)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.Name, &one.Icon, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for category")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice category")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on category")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for category")
	}

	if singular {
		object.R.Categories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &categoryR{}
			}
			foreign.R.Apps = append(foreign.R.Apps, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Categories = append(local.R.Categories, foreign)
				if foreign.R == nil {
					foreign.R = &categoryR{}
				}
				foreign.R.Apps = append(foreign.R.Apps, local)
				break
			}
		}
	}

	return nil
}

// LoadTags allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (appL) LoadTags(e boil.Executor, singular bool, maybeApp interface{}, mods queries.Applicator) error {
	var slice []*App
	var object *App

	if singular {
		object = maybeApp.(*App)
	} else {
		slice = *maybeApp.(*[]*App)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &appR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &appR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"tag\".*, \"a\".\"app_id\""),
		qm.From("\"tag\""),
		qm.InnerJoin("\"app_tag\" as \"a\" on \"tag\".\"id\" = \"a\".\"tag_id\""),
		qm.WhereIn("\"a\".\"app_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tag")
	}

	var resultSlice []*Tag

	var localJoinCols []string
	for results.Next() {
		one := new(Tag)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.Name, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for tag")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice tag")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tag")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tag")
	}

	if singular {
		object.R.Tags = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tagR{}
			}
			foreign.R.Apps = append(foreign.R.Apps, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Tags = append(local.R.Tags, foreign)
				if foreign.R == nil {
					foreign.R = &tagR{}
				}
				foreign.R.Apps = append(foreign.R.Apps, local)
				break
			}
		}
	}

	return nil
}

// LoadCarousels allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (appL) LoadCarousels(e boil.Executor, singular bool, maybeApp interface{}, mods queries.Applicator) error {
	var slice []*App
	var object *App

	if singular {
		object = maybeApp.(*App)
	} else {
		slice = *maybeApp.(*[]*App)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &appR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &appR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`carousel`), qm.WhereIn(`carousel.app_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load carousel")
	}

	var resultSlice []*Carousel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice carousel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on carousel")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for carousel")
	}

	if singular {
		object.R.Carousels = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &carouselR{}
			}
			foreign.R.App = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AppID {
				local.R.Carousels = append(local.R.Carousels, foreign)
				if foreign.R == nil {
					foreign.R = &carouselR{}
				}
				foreign.R.App = local
				break
			}
		}
	}

	return nil
}

// LoadVersions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (appL) LoadVersions(e boil.Executor, singular bool, maybeApp interface{}, mods queries.Applicator) error {
	var slice []*App
	var object *App

	if singular {
		object = maybeApp.(*App)
	} else {
		slice = *maybeApp.(*[]*App)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &appR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &appR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`version`), qm.WhereIn(`version.app_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load version")
	}

	var resultSlice []*Version
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice version")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on version")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for version")
	}

	if singular {
		object.R.Versions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &versionR{}
			}
			foreign.R.App = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AppID {
				local.R.Versions = append(local.R.Versions, foreign)
				if foreign.R == nil {
					foreign.R = &versionR{}
				}
				foreign.R.App = local
				break
			}
		}
	}

	return nil
}

// SetHot of the app to the related item.
// Sets o.R.Hot to related.
// Adds o to related.R.Apps.
func (o *App) SetHot(exec boil.Executor, insert bool, related *Hot) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"app\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"hot_id"}),
		strmangle.WhereClause("\"", "\"", 2, appPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.HotID = related.ID
	if o.R == nil {
		o.R = &appR{
			Hot: related,
		}
	} else {
		o.R.Hot = related
	}

	if related.R == nil {
		related.R = &hotR{
			Apps: AppSlice{o},
		}
	} else {
		related.R.Apps = append(related.R.Apps, o)
	}

	return nil
}

// AddCategories adds the given related objects to the existing relationships
// of the app, optionally inserting them as new records.
// Appends related to o.R.Categories.
// Sets related.R.Apps appropriately.
func (o *App) AddCategories(exec boil.Executor, insert bool, related ...*Category) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"app_category\" (\"app_id\", \"category_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &appR{
			Categories: related,
		}
	} else {
		o.R.Categories = append(o.R.Categories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &categoryR{
				Apps: AppSlice{o},
			}
		} else {
			rel.R.Apps = append(rel.R.Apps, o)
		}
	}
	return nil
}

// SetCategories removes all previously related items of the
// app replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Apps's Categories accordingly.
// Replaces o.R.Categories with related.
// Sets related.R.Apps's Categories accordingly.
func (o *App) SetCategories(exec boil.Executor, insert bool, related ...*Category) error {
	query := "delete from \"app_category\" where \"app_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeCategoriesFromAppsSlice(o, related)
	if o.R != nil {
		o.R.Categories = nil
	}
	return o.AddCategories(exec, insert, related...)
}

// RemoveCategories relationships from objects passed in.
// Removes related items from R.Categories (uses pointer comparison, removal does not keep order)
// Sets related.R.Apps.
func (o *App) RemoveCategories(exec boil.Executor, related ...*Category) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"app_category\" where \"app_id\" = $1 and \"category_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeCategoriesFromAppsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Categories {
			if rel != ri {
				continue
			}

			ln := len(o.R.Categories)
			if ln > 1 && i < ln-1 {
				o.R.Categories[i] = o.R.Categories[ln-1]
			}
			o.R.Categories = o.R.Categories[:ln-1]
			break
		}
	}

	return nil
}

func removeCategoriesFromAppsSlice(o *App, related []*Category) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Apps {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Apps)
			if ln > 1 && i < ln-1 {
				rel.R.Apps[i] = rel.R.Apps[ln-1]
			}
			rel.R.Apps = rel.R.Apps[:ln-1]
			break
		}
	}
}

// AddTags adds the given related objects to the existing relationships
// of the app, optionally inserting them as new records.
// Appends related to o.R.Tags.
// Sets related.R.Apps appropriately.
func (o *App) AddTags(exec boil.Executor, insert bool, related ...*Tag) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"app_tag\" (\"app_id\", \"tag_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &appR{
			Tags: related,
		}
	} else {
		o.R.Tags = append(o.R.Tags, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tagR{
				Apps: AppSlice{o},
			}
		} else {
			rel.R.Apps = append(rel.R.Apps, o)
		}
	}
	return nil
}

// SetTags removes all previously related items of the
// app replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Apps's Tags accordingly.
// Replaces o.R.Tags with related.
// Sets related.R.Apps's Tags accordingly.
func (o *App) SetTags(exec boil.Executor, insert bool, related ...*Tag) error {
	query := "delete from \"app_tag\" where \"app_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeTagsFromAppsSlice(o, related)
	if o.R != nil {
		o.R.Tags = nil
	}
	return o.AddTags(exec, insert, related...)
}

// RemoveTags relationships from objects passed in.
// Removes related items from R.Tags (uses pointer comparison, removal does not keep order)
// Sets related.R.Apps.
func (o *App) RemoveTags(exec boil.Executor, related ...*Tag) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"app_tag\" where \"app_id\" = $1 and \"tag_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeTagsFromAppsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Tags {
			if rel != ri {
				continue
			}

			ln := len(o.R.Tags)
			if ln > 1 && i < ln-1 {
				o.R.Tags[i] = o.R.Tags[ln-1]
			}
			o.R.Tags = o.R.Tags[:ln-1]
			break
		}
	}

	return nil
}

func removeTagsFromAppsSlice(o *App, related []*Tag) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Apps {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Apps)
			if ln > 1 && i < ln-1 {
				rel.R.Apps[i] = rel.R.Apps[ln-1]
			}
			rel.R.Apps = rel.R.Apps[:ln-1]
			break
		}
	}
}

// AddCarousels adds the given related objects to the existing relationships
// of the app, optionally inserting them as new records.
// Appends related to o.R.Carousels.
// Sets related.R.App appropriately.
func (o *App) AddCarousels(exec boil.Executor, insert bool, related ...*Carousel) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AppID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"carousel\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"app_id"}),
				strmangle.WhereClause("\"", "\"", 2, carouselPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AppID = o.ID
		}
	}

	if o.R == nil {
		o.R = &appR{
			Carousels: related,
		}
	} else {
		o.R.Carousels = append(o.R.Carousels, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &carouselR{
				App: o,
			}
		} else {
			rel.R.App = o
		}
	}
	return nil
}

// AddVersions adds the given related objects to the existing relationships
// of the app, optionally inserting them as new records.
// Appends related to o.R.Versions.
// Sets related.R.App appropriately.
func (o *App) AddVersions(exec boil.Executor, insert bool, related ...*Version) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AppID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"version\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"app_id"}),
				strmangle.WhereClause("\"", "\"", 2, versionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AppID = o.ID
		}
	}

	if o.R == nil {
		o.R = &appR{
			Versions: related,
		}
	} else {
		o.R.Versions = append(o.R.Versions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &versionR{
				App: o,
			}
		} else {
			rel.R.App = o
		}
	}
	return nil
}

// Apps retrieves all the records using an executor.
func Apps(mods ...qm.QueryMod) appQuery {
	mods = append(mods, qm.From("\"app\""))
	return appQuery{NewQuery(mods...)}
}

// FindApp retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindApp(exec boil.Executor, iD string, selectCols ...string) (*App, error) {
	appObj := &App{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"app\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, appObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from app")
	}

	return appObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *App) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no app provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(appColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	appInsertCacheMut.RLock()
	cache, cached := appInsertCache[key]
	appInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			appAllColumns,
			appColumnsWithDefault,
			appColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(appType, appMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(appType, appMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"app\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"app\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into app")
	}

	if !cached {
		appInsertCacheMut.Lock()
		appInsertCache[key] = cache
		appInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the App.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *App) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	key := makeCacheKey(columns, nil)
	appUpdateCacheMut.RLock()
	cache, cached := appUpdateCache[key]
	appUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			appAllColumns,
			appPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update app, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"app\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, appPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(appType, appMapping, append(wl, appPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update app row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for app")
	}

	if !cached {
		appUpdateCacheMut.Lock()
		appUpdateCache[key] = cache
		appUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q appQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for app")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for app")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AppSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), appPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"app\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, appPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in app slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all app")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *App) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no app provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	nzDefaults := queries.NonZeroDefaultSet(appColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	appUpsertCacheMut.RLock()
	cache, cached := appUpsertCache[key]
	appUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			appAllColumns,
			appColumnsWithDefault,
			appColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			appAllColumns,
			appPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert app, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(appPrimaryKeyColumns))
			copy(conflict, appPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"app\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(appType, appMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(appType, appMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert app")
	}

	if !cached {
		appUpsertCacheMut.Lock()
		appUpsertCache[key] = cache
		appUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single App record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *App) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no App provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), appPrimaryKeyMapping)
	sql := "DELETE FROM \"app\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from app")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for app")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q appQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no appQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from app")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for app")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AppSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), appPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"app\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, appPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from app slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for app")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *App) Reload(exec boil.Executor) error {
	ret, err := FindApp(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AppSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AppSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), appPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"app\".* FROM \"app\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, appPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in AppSlice")
	}

	*o = slice

	return nil
}

// AppExists checks if the App row exists.
func AppExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"app\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if app exists")
	}

	return exists, nil
}
