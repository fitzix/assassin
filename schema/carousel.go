// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Carousel is an object representing the database table.
type Carousel struct {
	ID    int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	AppID string `boil:"app_id" json:"appID" toml:"appID" yaml:"appID"`
	URL   string `boil:"url" json:"url" toml:"url" yaml:"url"`

	R *carouselR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L carouselL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CarouselColumns = struct {
	ID    string
	AppID string
	URL   string
}{
	ID:    "id",
	AppID: "app_id",
	URL:   "url",
}

// Generated where

var CarouselWhere = struct {
	ID    whereHelperint
	AppID whereHelperstring
	URL   whereHelperstring
}{
	ID:    whereHelperint{field: "\"carousel\".\"id\""},
	AppID: whereHelperstring{field: "\"carousel\".\"app_id\""},
	URL:   whereHelperstring{field: "\"carousel\".\"url\""},
}

// CarouselRels is where relationship names are stored.
var CarouselRels = struct {
	App string
}{
	App: "App",
}

// carouselR is where relationships are stored.
type carouselR struct {
	App *App
}

// NewStruct creates a new relationship struct
func (*carouselR) NewStruct() *carouselR {
	return &carouselR{}
}

// carouselL is where Load methods for each relationship are stored.
type carouselL struct{}

var (
	carouselAllColumns            = []string{"id", "app_id", "url"}
	carouselColumnsWithoutDefault = []string{"app_id", "url"}
	carouselColumnsWithDefault    = []string{"id"}
	carouselPrimaryKeyColumns     = []string{"id"}
)

type (
	// CarouselSlice is an alias for a slice of pointers to Carousel.
	// This should generally be used opposed to []Carousel.
	CarouselSlice []*Carousel

	carouselQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	carouselType                 = reflect.TypeOf(&Carousel{})
	carouselMapping              = queries.MakeStructMapping(carouselType)
	carouselPrimaryKeyMapping, _ = queries.BindMapping(carouselType, carouselMapping, carouselPrimaryKeyColumns)
	carouselInsertCacheMut       sync.RWMutex
	carouselInsertCache          = make(map[string]insertCache)
	carouselUpdateCacheMut       sync.RWMutex
	carouselUpdateCache          = make(map[string]updateCache)
	carouselUpsertCacheMut       sync.RWMutex
	carouselUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single carousel record from the query.
func (q carouselQuery) One(exec boil.Executor) (*Carousel, error) {
	o := &Carousel{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for carousel")
	}

	return o, nil
}

// All returns all Carousel records from the query.
func (q carouselQuery) All(exec boil.Executor) (CarouselSlice, error) {
	var o []*Carousel

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to Carousel slice")
	}

	return o, nil
}

// Count returns the count of all Carousel records in the query.
func (q carouselQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count carousel rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q carouselQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if carousel exists")
	}

	return count > 0, nil
}

// App pointed to by the foreign key.
func (o *Carousel) App(mods ...qm.QueryMod) appQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AppID),
	}

	queryMods = append(queryMods, mods...)

	query := Apps(queryMods...)
	queries.SetFrom(query.Query, "\"app\"")

	return query
}

// LoadApp allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (carouselL) LoadApp(e boil.Executor, singular bool, maybeCarousel interface{}, mods queries.Applicator) error {
	var slice []*Carousel
	var object *Carousel

	if singular {
		object = maybeCarousel.(*Carousel)
	} else {
		slice = *maybeCarousel.(*[]*Carousel)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &carouselR{}
		}
		args = append(args, object.AppID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &carouselR{}
			}

			for _, a := range args {
				if a == obj.AppID {
					continue Outer
				}
			}

			args = append(args, obj.AppID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`app`), qm.WhereIn(`app.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load App")
	}

	var resultSlice []*App
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice App")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for app")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for app")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.App = foreign
		if foreign.R == nil {
			foreign.R = &appR{}
		}
		foreign.R.Carousels = append(foreign.R.Carousels, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AppID == foreign.ID {
				local.R.App = foreign
				if foreign.R == nil {
					foreign.R = &appR{}
				}
				foreign.R.Carousels = append(foreign.R.Carousels, local)
				break
			}
		}
	}

	return nil
}

// SetApp of the carousel to the related item.
// Sets o.R.App to related.
// Adds o to related.R.Carousels.
func (o *Carousel) SetApp(exec boil.Executor, insert bool, related *App) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"carousel\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"app_id"}),
		strmangle.WhereClause("\"", "\"", 2, carouselPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AppID = related.ID
	if o.R == nil {
		o.R = &carouselR{
			App: related,
		}
	} else {
		o.R.App = related
	}

	if related.R == nil {
		related.R = &appR{
			Carousels: CarouselSlice{o},
		}
	} else {
		related.R.Carousels = append(related.R.Carousels, o)
	}

	return nil
}

// Carousels retrieves all the records using an executor.
func Carousels(mods ...qm.QueryMod) carouselQuery {
	mods = append(mods, qm.From("\"carousel\""))
	return carouselQuery{NewQuery(mods...)}
}

// FindCarousel retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCarousel(exec boil.Executor, iD int, selectCols ...string) (*Carousel, error) {
	carouselObj := &Carousel{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"carousel\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, carouselObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from carousel")
	}

	return carouselObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Carousel) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no carousel provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(carouselColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	carouselInsertCacheMut.RLock()
	cache, cached := carouselInsertCache[key]
	carouselInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			carouselAllColumns,
			carouselColumnsWithDefault,
			carouselColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(carouselType, carouselMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(carouselType, carouselMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"carousel\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"carousel\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into carousel")
	}

	if !cached {
		carouselInsertCacheMut.Lock()
		carouselInsertCache[key] = cache
		carouselInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Carousel.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Carousel) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	carouselUpdateCacheMut.RLock()
	cache, cached := carouselUpdateCache[key]
	carouselUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			carouselAllColumns,
			carouselPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update carousel, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"carousel\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, carouselPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(carouselType, carouselMapping, append(wl, carouselPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update carousel row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for carousel")
	}

	if !cached {
		carouselUpdateCacheMut.Lock()
		carouselUpdateCache[key] = cache
		carouselUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q carouselQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for carousel")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for carousel")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CarouselSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), carouselPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"carousel\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, carouselPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in carousel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all carousel")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Carousel) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no carousel provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(carouselColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	carouselUpsertCacheMut.RLock()
	cache, cached := carouselUpsertCache[key]
	carouselUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			carouselAllColumns,
			carouselColumnsWithDefault,
			carouselColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			carouselAllColumns,
			carouselPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert carousel, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(carouselPrimaryKeyColumns))
			copy(conflict, carouselPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"carousel\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(carouselType, carouselMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(carouselType, carouselMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert carousel")
	}

	if !cached {
		carouselUpsertCacheMut.Lock()
		carouselUpsertCache[key] = cache
		carouselUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Carousel record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Carousel) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no Carousel provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), carouselPrimaryKeyMapping)
	sql := "DELETE FROM \"carousel\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from carousel")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for carousel")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q carouselQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no carouselQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from carousel")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for carousel")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CarouselSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), carouselPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"carousel\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, carouselPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from carousel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for carousel")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Carousel) Reload(exec boil.Executor) error {
	ret, err := FindCarousel(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CarouselSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CarouselSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), carouselPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"carousel\".* FROM \"carousel\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, carouselPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in CarouselSlice")
	}

	*o = slice

	return nil
}

// CarouselExists checks if the Carousel row exists.
func CarouselExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"carousel\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if carousel exists")
	}

	return exists, nil
}
